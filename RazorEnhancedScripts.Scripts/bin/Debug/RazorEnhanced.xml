<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RazorEnhanced</name>
    </assembly>
    <members>
        <member name="T:Assistant.BuffInfo">
            <summary>
            Contains all buff information like icon, time, text, description, cliloc, etc...
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.Icon">
            <summary>
            Buff type
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.Duration">
            <summary>
            Total duration
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.StartTime">
            <summary>
            Started time
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.TitleCliloc">
            <summary>
            Cliloc title ID
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.TitleArgs">
            <summary>
            Cliloc title args
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.DescriptionCliloc">
            <summary>
            Cliloc description ID
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.DescriptionArgs">
            <summary>
            Cliloc description args
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.ExtraInfoCliloc">
            <summary>
            Cliloc extra information ID
            </summary>
        </member>
        <member name="P:Assistant.BuffInfo.ExtraInfoArgs">
            <summary>
            Cliloc extra information args
            </summary>
        </member>
        <member name="T:Assistant.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.accessories_text_editor_5">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.aggiungi">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.applications_utilities">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.applications_utilities1">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraGrandeOrizzontaBordoDestro">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraGrandeOrizzontaBordoSinistro">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraGrandeOrizzontaleSlot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraGrandeOrizzontaleSpazioStat">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraGrandeVerticaleBordoSopra">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraGrandeVerticaleBordoSotto">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraGrandeVerticaleSlot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraGrandeVerticaleSpazioStat">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraOrizzontaBordoDestro">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraOrizzontaBordoSinistro">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraOrizzontaleSlot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraOrizzontaleSpazioStat">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraVerticaleBordoSopra">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraVerticaleBordoSotto">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraVerticaleSlot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.BarraVerticaleSpazioStat">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.bug">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.bug_add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.bug_delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.bug_go">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.cancella">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.document_close_2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.document_open_7">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.document_save_5">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.esporta">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.github">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.green">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.gump">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.importa">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.map_dead">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.map_deadIn">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.map_deadOut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.map_mortal">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.map_paralized">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.map_poison">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.media_playback_loop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.media_playback_pause_3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.media_playback_start_3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.media_playback_stop_3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.media_seek_forward_3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.media_skip_forward_3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.PayPal">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.playagent">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.razor_enhanced_ico">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.razor_enhanced_png">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.razor_enhanced_splash">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.RazorCheckBox_Off">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.RazorCheckBox_On">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.RazorComboBox_Arrow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.RazorRadioButton_Off">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.RazorRadioButton_On">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.record">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.red">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.RoundButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.search2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Anatomy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_AnimalLore">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_AnimalTaming">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_ArmsLore">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Begging">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Cartography">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_DetectingHidden">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Discordance">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_EvalInt">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_ForesicEvalutation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Hiding">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Imbuing">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Inscription">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_ItemID">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Meditation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Peacemaking">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Poisoning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Provocation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_RemoveTrap">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_SpiritSpeak">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Stealing">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Stealth">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_TasteID">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.Skill_Icon_Tracking">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.splashnew">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.splashnew1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.stopagent">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.toolbar">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.uod_logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Properties.Resources.yellow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Assistant.Item.ContainerOpened">
            <summary>
            True when the container was opened
            </summary>
        </member>
        <member name="F:Assistant.PacketHandlers.m_LastContainerDisplay">
            <summary>
            Last container displayed to the client
            </summary>
        </member>
        <member name="M:Assistant.Packet.Write(System.Boolean)">
            Packet Writer/////////////////////////////
        </member>
        <member name="T:Assistant.ScreenCapManager.User32">
            <summary>
            Helper class containing User32 API functions
            </summary>
        </member>
        <member name="M:Assistant.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Assistant.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Assistant.RazorFastColoredTextBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Assistant.RazorFastColoredTextBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Assistant.RazorFastColoredTextBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Assistant.HueEntry">
            <summary>
            Summary description for HueEntry.
            </summary>
        </member>
        <member name="F:Assistant.HueEntry.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Assistant.HueEntry.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Assistant.HueEntry.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Assistant.SplashScreen.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Assistant.SplashScreen.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Assistant.Utility.DelayUntil(System.Func{System.Boolean},System.Int32)">
            <summary>
            Delays execution until the specified condition is met.
            </summary>
            <param name="condition">The lambda conditional that must be met to end the delay.</param>
            <param name="delay">The maximum time to delay.</param>
            <returns>true if condition was satisfied, false if max delay time expired</returns>
        </member>
        <member name="T:RazorEnhanced.BuffInfo">
            <summary>
            Contains all buff information
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.Name">
            <summary>
            Buff name
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.Icon">
            <summary>
            Buff Icon type
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.StartTime">
            <summary>
            Buff Started time (datetime ticks)
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.Duration">
            <summary>
            Buff Total duration in milliseconds
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.Remaining">
            <summary>
            Buff time remaining in milliseconds
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.HasExpired">
            <summary>
            If buff has expired
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.Elapsed">
            <summary>
            Buff time elapsed in milliseconds
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.Title">
            <summary>
            Buff Title
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.Description">
            <summary>
            Buff description (with all args/clilocs parsed)
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.ExtraInfo">
            <summary>
            Extra information
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.TitleCliloc">
            <summary>
            Title cliloc id
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.TitleArgs">
            <summary>
            Title cliloc args 
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.DescriptionCliloc">
            <summary>
            Description cliloc id
            </summary>
        </member>
        <member name="P:RazorEnhanced.BuffInfo.DescriptionArgs">
            <summary>
            Title cliloc args (useful to look up some values like Enemy of one dmg bonus, poison damage, etc...)
            </summary>
        </member>
        <member name="M:RazorEnhanced.BuffInfo.ParseArgs(System.String)">
            <summary>
            Parse arguments from the server to a valid arguments to the standard logic
            some arguments are send with \t even if not needed, and it broke the all logic, or missing ones, order, etc
            </summary>
            <param name="args">Arguments to fix</param>
            <returns></returns>
        </member>
        <member name="T:RazorEnhanced.DocContainer">
            <summary>
            DocContainer is the root container of the JSON API file, used for (de)serialization.
            </summary>
        </member>
        <member name="T:RazorEnhanced.AutoDocIO">
            <summary>.
            This class provides various methods to Import and Export the API generated by AutoDoc.
            </summary>
        </member>
        <member name="M:RazorEnhanced.AutoDocIO.ExportPythonAPI(System.String,System.Boolean)">
            <summary>
            Export the RE Python API list to disk using in JSON.
            </summary>
            <param name="path">Define the output path</param>
            <param name="pretty">Output readable JSON (Default: True)</param>
        </member>
        <member name="T:RazorEnhanced.AutoDoc">
            <summary>
            Automatically generate the full list of RE Python API using Reflection.
            The API is further integrated with the data coming from standard C#  comments.
            </summary>
        </member>
        <member name="F:RazorEnhanced.AutoDoc.baseName">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.AutoDoc.TAG_AUTOCOMPLETE">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.AutoDoc.TAG_NODOC">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.AutoDoc.TAG_DEPRECATE">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.AutoDoc.TAG_EXPERIMENTAL">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.AutoDoc.TAG_TESTING">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.AutoDoc.TAG_STABLE">
            <summary>@nodoc</summary>
        </member>
        <member name="M:RazorEnhanced.AutoDoc.GetPythonAPI(System.Boolean)">
            <summary>
            Use reflection to generete the Python API List
            </summary>
        </member>
        <member name="T:RazorEnhanced.XMLCommentReader">
            <summary>
            Author: Dalamar
            XML Comment Reader assembled following this article:
            https://docs.microsoft.com/en-us/archive/msdn-magazine/2019/october/csharp-accessing-xml-documentation-via-reflection
            </summary>
        </member>
        <member name="T:RazorEnhanced.CSharpEngine">
            <summary>
            This class is used to compile and execute C# scripts.
            </summary>
        </member>
        <member name="M:RazorEnhanced.CSharpEngine.FindDirectivesInFile(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            This function finds for a specific directive inside a script. 
            </summary>
            <param name="filename">File where look for the directive</param>
            <param name="directive">Which directive must be found</param>
            <param name="directiveList">List of all directives found</param>
            <returns>Returns false if file does not exist</returns>
        </member>
        <member name="M:RazorEnhanced.CSharpEngine.ExtractFileNameFromDirective(System.String,System.String,System.String@)">
            <summary>
            Estract the filename from a file directive
            </summary>
            <param name="directive">String containing the whole directive</param>
            <param name="basepath">Basepath for the relative path directives</param>
            <param name="filename">Extracted filename</param>
            <returns>Returns false if an error occurs</returns>
        </member>
        <member name="M:RazorEnhanced.CSharpEngine.FindAllAssembliesIncludedInCSharpScripts(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            This function searches for our custom directive //#assembly that allow include a specific assembly (DLL) into the script
            </summary>
            <param name="filesList">Full path of all files where search for the directive</param>
            <param name="assemblies">List of all assemblies that must be inclide during the compile process</param>
            <param name="errorwarnings">List of error and warnings</param>
        </member>
        <member name="M:RazorEnhanced.CSharpEngine.FindAllIncludedCSharpScript(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            This function searches for our custom directive //#import that allows import classes from other C# files
            The directive must be added anywhere before the namespace and can be used in C stile with &gt; &lt; or ""
            Using relative path with &gt; &lt; the base directory will the Scripts folder
            </summary>
            <param name="sourceFile">Full path of the source file</param>
            <param name="filesList">List of all files that must be compiled (it's a recursive list)</param>
            <param name="errorwarnings">List of error and warnings</param>
        </member>
        <member name="M:RazorEnhanced.CSharpEngine.CheckForceDebugDirective(System.String,System.Boolean)">
            <summary>
            This function checks for directive //#forcedebug
            By default all scripts are builded in release. Only the button "Debug Mode", in the Script Editor, allow you to compile in debug.
            If this directive is present, the script will be builded in debug instead of release bypassing all the default rules
            </summary>
            <param name="sourceFile">Filename of the main source file</param>
            <param name="debug_requested">If false, Razor is requesting to run the script in release</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.CSharpEngine.Stop">
            <summary>
            Kills the VBCSCompiler process if no other RazorEnhanced or ClassicUO process is running
            </summary>
        </member>
        <member name="T:RazorEnhanced.CUO">
            <summary>
            The CUO_Functions class contains invocation of CUO code using reflection
            DANGER !!
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.LoadMarkers">
            <summary>
            Invokes the LoadMarkers function inside the CUO code
            Map must be open for this to work
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.GoToMarker(System.Int32,System.Int32)">
            <summary>
            Invokes the GoToMarker function inside the CUO code
            Map must be open for this to work
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.FreeView(System.Boolean)">
            <summary>
            Invokes the FreeView function inside the CUO code
            First value is retrieved, and then only set if its not correct
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.CloseTMap">
            <summary>
            Invokes the CloseWithRightClick function inside the CUO code
            First T-Map is retrieved, and then only closed if it is a map
            Returns True if a map was closed, else False
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.ProfilePropertySet(System.String,System.Boolean)">
            <summary>
            Set a bool Config property in CUO by name
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.ProfilePropertySet(System.String,System.Int32)">
            <summary>
            Set a int Config property in CUO by name
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.ProfilePropertySet(System.String,System.String)">
            <summary>
            Set a string Config property in CUO by name
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.OpenContainerAt(RazorEnhanced.Item,System.Int32,System.Int32)">
            <summary>
            Set a location that CUO will open the container at
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.OpenContainerAt(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Set a location that CUO will open the container at
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.SetGumpOpenLocation(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Set a location that CUO will open the next gump or container at
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.MoveGump(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Invokes the Method move a gump or container if open.
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.CloseMyStatusBar">
            <summary>
            Invokes the Method to close your status bar gump inside the CUO code
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.OpenMyStatusBar(System.Int32,System.Int32)">
            <summary>
            Invokes the Method to open your status bar gump inside the CUO code
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.OpenMobileHealthBar(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Open a mobiles health bar at a specified location on the screen
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.OpenMobileHealthBar(System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes the Method to open your status bar gump inside the CUO code
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.CloseMobileHealthBar(System.Int32)">
            <summary>
            Closes a Mobile Status Gump of an Entity
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.CloseMobileHealthBar(System.UInt32)">
            <summary>
            Closes a Mobile Status Gump of an Entity
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.CloseGump(System.UInt32)">
            <summary>
            Invokes the Method close a gump
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.GetSetting(System.String)">
            <summary>
            Retrieve Current CUO Setting
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.PlayMacro(System.String)">
            <summary>
            Play a CUO macro by name
            Warning, limited testing !! 
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.FollowMobile(System.UInt32)">
             <summary>
             Make the ClassicUO client follow the specific mobile.
            
             This is the same behavior as alt + left-clicking, which normally
             shows the overhead message "Now following."
             </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.FollowOff">
            <summary>
            Stop the ClassicUO client from following, if it was following a
            mobile.
            </summary>
        </member>
        <member name="M:RazorEnhanced.CUO.Following">
            <summary>
            Returns the status and target of the ClassicUO client's follow
            behavior.
            </summary>
            <returns>bool followingMode, uint followingTarget</returns>
        </member>
        <member name="M:RazorEnhanced.EnhancedScriptEngine.Load">
            <summary>
             Load the script and bring the specifict engine state at one step before execution.
             </summary>
        </member>
        <member name="M:RazorEnhanced.EnhancedScriptEngine.Run">
            <summary>
             Run the script.
             </summary>
        </member>
        <member name="M:RazorEnhanced.EnhancedScriptEngine.LoadCSharp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:RazorEnhanced.PacketLogger">
            <summary>
            RazorEnhanced packet logger.
            </summary>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.SetOutputPath(System.String)">
            <summary>
            Set the RazorEnhanced packet logger. Calling it without a path it rester it to the default path.
            </summary>
            <param name="outputpath">(Optional) Custom output path (Default: reset to ./Desktop/Razor_Packets.log)</param>
            <returns>The path to the saved file.</returns>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.Start(System.String,System.Boolean)">
            <summary>
            Start the RazorEnhanced packet logger.
            </summary>
            <param name="outputpath">Custom output path (Default: ./Desktop/Razor_Packets.log)</param>
            <param name="appendLogs">True: Append - False: Overwrite (Default: False)</param>
            <returns>The path to the saved file.</returns>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.Stop">
            <summary>
            Stop the RazorEnhanced packet logger. 
            </summary>
            <returns>The path to the saved file.</returns>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.SendToServer(System.Byte[])">
            <summary>
            Send a packet to the server.                                                                                     
            </summary>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.SendToClient(System.Byte[])">
            <summary>
            Send a packet to the client. 
            </summary>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.AddTemplate(System.String)">
            <summary>
            Add a custom template for RazorEnhanced packet logger.
            
            Example of "Damage" (0x0B) packet:
            {
             'packetID': 0x0B,
             'name': 'Damage 0x0B',
             'showHexDump': true,
             'fields':[
               { 'name':'packetID', 'length':1, 'type':'packetID'},
               { 'name':'Serial', 'length':4, 'type':'serial'},
               { 'name':'Damage', 'length': 2, 'type':'int'},
             ]
            }
            
            </summary>
            <param name="packetTemplate">Add a PacketTemplate, check ./Config/packets/ folder.</param>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.RemoveTemplate(System.Int32)">
            <summary>
            Remove a PacketTemplate for RazorEnhanced packet logger.
            </summary>
            <param name="packetID">Remove a spacific packetID. (Default: -1 Remove All)</param>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.AddBlacklist(System.Int32)">
            <summary>
            Add the packetID to the blacklist. Packets in the backlist will not be logged. (See PacketLogger.DiscardAll() ) 
            </summary>
            <param name="packetID">PacketID to blacklist</param>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.AddWhitelist(System.Int32)">
            <summary>
            Add the packetID to the whitelist. Packets in the whitelist are always. (See PacketLogger.DiscardAll() ) 
            </summary>
            <param name="packetID">PacketID to whitelist</param>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.DiscardAll(System.Boolean)">
            <summary>
            Packet logger will discard all packets, except the one in the whitelist.  (See PacketLogger.AddWhitelist() ) 
            </summary>
            <param name="discardAll">True: Log only the packet in the whitelist - False: Log everything, but the packets in the blacklist</param>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.DiscardShowHeader(System.Boolean)">
            <summary>
            Packet logger will show the headers of discarded packets.
            </summary>
            <param name="showHeader">True: Always show headers - False: Hide everything.</param>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.Reset">
            <summary>
            Reset the packet logger to defaults.
            </summary>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.ListenPacketPath(System.String,System.Boolean)">
            <summary>
            Packet logger will discard all packets, except the one in the whitelist.  (See PacketLogger.AddWhitelist() ) 
            If the packetPath is not set or not resognized, the function simply returns the current active paths.
            </summary>
            <param name="packetPath">
            Possible values:
               ClientToServer
               ServerToClient
               RazorToServer (TODO)
               RazorToClient (TODO)
               PacketVideo   (TODO)
            </param>
            <returns>List of strings of currently active packet paths.</returns>
        </member>
        <member name="T:RazorEnhanced.PacketLogger.PacketTemplate">
             <summary>
             Rapresents a general purpose template system for packets. 
             The templates allow to format packets in the logger, making them readable.
             
             Example of "Damage" (0x0B) packet:
             
             {
              'packetID': 0x0B,
              'name': 'Damage 0x0B',
              'showHexDump': true,
              'fields':[
                { 'name':'packetID', 'length':1, 'type':'packetID'},
                { 'name':'Serial', 'length':4, 'type':'serial'},
                { 'name':'Damage', 'length': 2, 'type':'int'},
              ]
             }
            
             </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.PacketTemplate.version">
            <summary>
            Template version,optional
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.PacketTemplate.packetID">
            <summary>
            packetID, mandatory. 
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.PacketTemplate.name">
            <summary>
            A readable name for the packet, optional but useful.
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.PacketTemplate.showHexDump">
            <summary>
            If showHexDump is true the packet logger will show also the hex dump.
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.PacketTemplate.dynamicLength">
            <summary>
            Advanced settings for PacketReader. Ask Crezdba about DLLImport.Razor.IsDynLength(buff[0])
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.PacketTemplate.fields">
            <summary>
            List of fields present in this Packet.
            </summary>
        </member>
        <member name="T:RazorEnhanced.PacketLogger.FieldTemplate">
            <summary>
            Class representing the fields inside a packet template.
            Example of "Damage" (0x0B) packet:
            
            {
             'packetID': 0x0B,
             'name': 'Damage 0x0B',
             'showHexDump': true,
             'fields':[
               { 'name':'packetID', 'length':1, 'type':'packetID'},
               { 'name':'Serial', 'length':4, 'type':'serial'},
               { 'name':'Damage', 'length': 2, 'type':'int'},
             ]
            }
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldTemplate.name">
            <summary>
            Dysplay Name of the field.
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldTemplate.length">
            <summary>
            Length in bytes. length > 0 maybe a mandatory for some FieldType.
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldTemplate.type">
            <summary>
            Type of field. See FieldType for details on each type.
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldTemplate.fields">
            <summary>
            List of subfields present in this Field.
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldTemplate.subpacket">
            <summary>
            A subpacket Field.
            </summary>
        </member>
        <member name="T:RazorEnhanced.PacketLogger.FieldType">
            <summary>
            Type of Fields available for FieldTemplate 
            Example of "Damage" (0x0B) packet:
            
            {
             'packetID': 0x0B,
             'name': 'Damage 0x0B',
             'showHexDump': true,
             'fields':[
               { 'name':'packetID', 'length':1, 'type':'packetID'},
               { 'name':'Serial', 'length':4, 'type':'serial'},
               { 'name':'Damage', 'length': 2, 'type':'int'},
             ]
            }
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.PACKETID">
            <summary>
            Common type present in every packet, packetID, length is fixed to 1 byte.
                       
            Example:
            {'name':'packetID', 'type':'packetID'}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.SERIAL">
            <summary>
            Serial type, length is fixed to 4 bytes and is displayed as 0x hex.
                  
            Example:
            {'name':'Target Serial', 'type':'serial'}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.MODELID">
            <summary>
            ModelID type like Item.ItemdID, Mobile.Body, etc.
            Length is fixed to 2 bytes and is displayed as 0x hex.
                  
            Example:
            {'name':'Item ID', 'type':'modelID'}
            {'name':'Mobile Body', 'type':'modelID'}
            {'name':'Static ID', 'type':'modelID'}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.BOOL">
            <summary>
            Boolean type, length is fixed to 1 byte.
                  
            Example:
            {'name':'Paralized', 'type':'bool'}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.INT">
            <summary>
            Integers type used for positive and negative integers.
            Length is mandatory and can range between 1 and 4 bytes.
                  
            Example:
            {'name':'Z Level', 'type':'int', 'length': 2}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.UINT">
            <summary>
            Unsigned integers type used for positive integers.
            Length is mandatory and can range between 1 and 4 bytes.
                  
            Example:
            {'name':'Z Level', 'type':'uint', 'length': 2}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.HEX">
            <summary>
            Hex type is equivalent to unsigned integers but the contents is displayed as 0x hex.
            Length is mandatory and can range between 1 and 4 bytes.
                  
            Example:
            {'name':'Hue', 'type':'hex', 'length': 2}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.TEXT">
            <summary>
            Text reads bytes as text.
            Length is mandatory.
                  
            Example:
            {'name':'Name', 'type':'text', 'length': 20}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.UTF8">
            <summary>
            Text reads bytes as UTF8 text.
            Length is mandatory.
                  
            Example:
            {'name':'Pet name', 'type':'utf8', 'length': 40}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.SKIP">
            <summary>
            Skip a certain amount of data.
            Length is mandatory.
                  
            Example:
            {'name':'unused', 'type':'skip', 'length': 40}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.DUMP">
            <summary>
            Dump a certain amount of data as raw bytes-by-bytes HEX 
            Length is mandatory.
                  
            Example:
            {'name':'unused', 'type':'dump', 'length': 40}
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.SUBPACKET">
            <summary>
            A special field which denotes the beginning of a subpacket. 
            'length' is ignored, 'type' is optional, 'subpacket' is mandatory.
            
            Example:
            {'name':'action', 'type':'subpacket',
              'subpacket':{
                'name':'my subpacket'
                'fields':[
                    ...
                ]
              }
            
            }
            </summary>
        </member>
        <member name="F:RazorEnhanced.PacketLogger.FieldType.FIELDS">
            <summary>
            A special field which has subfields, useful for displaying stucts. 
            'length' is ignored, 'type' is optional, 'fields' is mandatory.
            
            Example:
            {'name':'Player Position', 'type':'fields',
              'fields':[
                     {'name':'X', 'type':'uint', 'length': 2}
                     {'name':'Y', 'type':'uint', 'length': 2}
                     {'name':'Z', 'type':'uint', 'length': 1}
               ]
            }
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:RazorEnhanced.PacketLogger.FieldType.FIELDSFOR" -->
        <member name="F:RazorEnhanced.PacketLogger.FieldType.VALID_TYPES">
            <summary>
            List of valid types
            </summary>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.FieldType.IsValid(System.String)">
            <summary>
            Check if the name of type is a valid Template filed type.
            </summary>
            <param name="typename">Name of the types</param>
            <returns>True: is resognized. - False: not recognized.</returns>
        </member>
        <member name="T:RazorEnhanced.PacketLogger.TemplateParser">
            <summary>
            Given a PacketTemplate and some packet data[] it produces a structured object based on the template.
            </summary>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.TemplateParser.parse(RazorEnhanced.PacketLogger.PacketTemplate,System.Byte[])">
            <summary>
            Format and structure some packet data according to a given template.
            </summary>
            <returns>A serializable object representing the parsed packet.</returns>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.TemplateParser.parsePacket(RazorEnhanced.PacketLogger.PacketTemplate,Assistant.PacketReader)">
            <summary>
            @nodoc
            </summary>
        </member>
        <member name="M:RazorEnhanced.PacketLogger.TemplateParser.parseField(RazorEnhanced.PacketLogger.FieldTemplate,Assistant.PacketReader)">
            <summary>
            @nodoc
            </summary>
        </member>
        <member name="T:RazorEnhanced.Tile">
            <summary>
            Class representing an (X,Y) coordinate. Optimized for pathfinding tasks.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Tile.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a Tile starting from X,Y coordinates (see PathFindig.GetPath)
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>Returns a Tile object</returns>
        </member>
        <member name="P:RazorEnhanced.Tile.X">
            <summary>Coordinate X.</summary>
        </member>
        <member name="P:RazorEnhanced.Tile.Y">
            <summary>Coordinate Y.</summary>
        </member>
        <member name="M:RazorEnhanced.PathMove.GetPath(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This function will get the path from actual position to a X,Y coordinate of same map
            </summary>
            <param name="x">X coordinate of same map</param>
            <param name="y">Y coordinate of same map</param>
            <param name="scanMaxRange">Max range to scan a path (x, y) should be included in this max range</param>
            <param name="ignoremob">consider mobs as obsticles or not</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.PathMove.GetPath(System.Int32,System.Int32,System.Boolean)">
            <summary>
            This function will get the path from actual position to a X,Y coordinate of same map, getting as scanMaxRange the max difference between positions + 2
            </summary>
            <param name="x">X coordinate of same map</param>
            <param name="y">Y coordinate of same map</param>
            <param name="ignoremob">consider mobs as obsticles or not</param>
            <returns></returns>
        </member>
        <member name="T:RazorEnhanced.PathFinding">
            <summary>
            This class implements the PathFinding algorithm using A-Star. 
            </summary>
        </member>
        <member name="T:RazorEnhanced.PathFinding.Route">
            <summary>
            The Route class is used to configure the PathFinding.
            </summary>
        </member>
        <member name="M:RazorEnhanced.PathFinding.Route.#ctor">
            <summary>
            Create an empty Route object.
            </summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.X">
            <summary>Sets the destination position X. (default: 0)</summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.Y">
            <summary>Sets the destination position Y. (default: 0)</summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.DebugMessage">
            <summary>Outputs a debug message. (default: False)</summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.StopIfStuck">
            <summary>Halts the pathfinding fail to walk the path. (default: 0)</summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.IgnoreMobile">
            <summary>Ignores any mobiles with the path calculation. (default: 0)</summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.UseResync">
            <summary>ReSyncs the path calculation. (default: False)</summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.MaxRetry">
            <summary>Number of attempts untill the path calculation is halted. (default: -1, no limit)</summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.Timeout">
            <summary>Maximum amount of time to run the path. (default: -1, no limit)</summary>
        </member>
        <member name="F:RazorEnhanced.PathFinding.Route.Run">
            <summary>Maximum amount of time to run the path. (default: -1, no limit)</summary>
        </member>
        <member name="M:RazorEnhanced.PathFinding.PathFindTo(RazorEnhanced.Point3D)">
            <summary>
            Go to the given coordinates using Razor pathfinding.
            </summary>
        </member>
        <member name="M:RazorEnhanced.PathFinding.PathFindTo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Go to the given coordinates using Razor pathfinding.
            </summary>
            <param name="x">X map coordinates or Point3D</param>
            <param name="y">Y map coordinates</param>
            <param name="z">Z map coordinates</param>
        </member>
        <member name="M:RazorEnhanced.PathFinding.Tile(System.Int32,System.Int32)">
            <summary>
            Create a Tile starting from X,Y coordinates (see PathFindig.RunPath)
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>Returns a Tile object</returns>
        </member>
        <member name="M:RazorEnhanced.PathFinding.Go(RazorEnhanced.PathFinding.Route)">
            <summary>
            Check if a destination is reachable.
            </summary>
            <param name="r">A customized Route object.</param>
            <returns>True: if a destination is reachable.</returns>
        </member>
        <member name="M:RazorEnhanced.PathFinding.GetPath(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Compute the path for the given destination and returns a list of Tile (coordinates).
            </summary>
            <param name="dst_x">Destination X.</param>
            <param name="dst_y">Destination Y.</param>
            <param name="ignoremob">Ignores any mobiles with the path calculation.</param>
            <returns>List of Tile objects, each holds a .X and .Y coordinates.</returns>
        </member>
        <member name="M:RazorEnhanced.PathFinding.RunPath(System.Collections.Generic.List{RazorEnhanced.Tile},System.Single,System.Boolean,System.Boolean)">
            <summary>
            Run a given path, represented as list of Tile (see PathFindig.GetPath).
            </summary>
            <param name="path">List of coordinates as Tile objects.</param>
            <param name="timeout">Maximum amount of time to run the path. (default: -1, no limit)</param>
            <param name="debugMessage">Outputs a debug message.</param>
            <param name="useResync">ReSyncs the path calculation.</param>
            <returns>True: if it finish the path in time. False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.PathFinding.runPath(System.Single,System.Boolean,System.Boolean)">
            <param name="path">List of coordinates as Tile objects.</param>
            <param name="timeout">Maximum amount of time to run the path. (default: -1, no limit)</param>
            <param name="debugMessage">Outputs a debug message.</param>
            <param name="useResync">ReSyncs the path calculation.</param>
            <returns>True: if it finish the path in time. False: otherwise</returns>
        </member>
        <member name="T:RazorEnhanced.Sound">
            <summary>
            The Sound class provides an api to manipulate Sounds. 
            For now it just turns logging for sounds on / off or waits for a list of sounds
            All the WeakRef stuff seems like overkill and a pia. 
            The problem was if you started the wait and then killed the python script, the entry in the waiters list just stayed forever
            The only way around this is to have a weakref stored in the list, then if the local var ManualResetEvent went out of scope, 
            the WeakRef will go to null.  At end of loop we clean up all null entries so the list stays clean.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Sound.AddFilter(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds a filter of incoming sound requests
            </summary>
            <param name="name"> The name of the filter to be added</param>
            <param name="sounds"> The sounds to be filtered</param>
        </member>
        <member name="M:RazorEnhanced.Sound.RemoveFilter(System.String)">
            <summary>
            Removes a filter of incoming sound requests
            </summary>
            <param name="name"> The name of the filter to be removed</param>
        </member>
        <member name="M:RazorEnhanced.Sound.Log(System.Boolean)">
            <summary>
            Enables/Disables logging of incoming sound requests
            </summary>
            <param name="activateLogging"> True= activate sound logging/ False Deactivate sound logging</param>
        </member>
        <member name="M:RazorEnhanced.Sound.LogDetail(System.Boolean)">
            <summary>
            @nodoc
            Enables/Disables detail logging of incoming sound requests
            </summary>
            <param name="activateLogging"> True= activate sound logging/ False Deactivate sound logging</param>
        </member>
        <member name="M:RazorEnhanced.Sound.LastSoundMatch">
            <summary>
            @nodoc
            Returns the location of the last sound matched with a filter
            </summary>
            <param name="activateLogging"> True= activate sound logging/ False Deactivate sound logging</param>
        </member>
        <member name="M:RazorEnhanced.Sound.WaitForSound(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Waits for a sound to arrive, or for timeout 
            </summary>
            <param name="sounds"> list of sound ids to wait for</param>
            <param name="timeout"> maximum time to wait for sound to arrive. not specified will be 10 minutes</param>
        </member>
        <member name="F:RazorEnhanced.SpellGrid.m_panellist">
            <summary>
            ///////////////////////////////////////////
            </summary>
        </member>
        <member name="T:RazorEnhanced.Timer">
            <summary>
            Timer are normally used to display messages after a certain period of time. 
            They are also often used to keep track of the maximum amount of time for an action to complete.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Timer.Timers">
            <summary>
            @nodoc
            List of active timers.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Timer.Create(System.String,System.Int32,System.String)">
            <summary>
            Create a timer with the provided name that will expire in ms_timer time (in milliseconds)
            </summary>
            <param name="name">Timer name.</param>
            <param name="delay">Delay in milliseconds.</param>
            <param name="message">Message displayed at timeouit.</param>
        </member>
        <member name="M:RazorEnhanced.Timer.Check(System.String)">
            <summary>
            Check if a timer object is expired or not.
            </summary>
            <param name="name"></param>
            <returns>true if not expired, false if expired</returns>
        </member>
        <member name="M:RazorEnhanced.Timer.Remaining(System.String)">
            <summary>
            Get remaining time for a named timer
            </summary>
            <param name="name">Timer name</param>
            <returns>Returns the milliseconds remaining for a timer.</returns>
        </member>
        <member name="T:RazorEnhanced.Statics">
            <summary>
            The Statics class provides access to informations about the Map, down to the individual tile.
            When using this function it's important to remember the distinction between Land and Tile:
            Land
            ----
            For a given (X,Y,map) there can be only 1 (0 zero) Land item, and has 1 specific Z coordinate.
            
            Tile
            ----
            For a given (X,Y,map) there can be any number of Tile items.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Statics.GetLandID(System.Int32,System.Int32,System.Int32)">
            <summary>
            Land: Return the StaticID of the Land item, give the coordinates and map.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="map">
                0 = Felucca
                1 = Trammel
                2 = Ilshenar
                3 = Malas
                4 = Tokuno
                5 = TerMur
            </param>
            <returns>Return the StaticID of the Land tile </returns>
        </member>
        <member name="M:RazorEnhanced.Statics.GetLandZ(System.Int32,System.Int32,System.Int32)">
            <summary>
            Land: Return the Z coordinate (height) of the Land item, give the coordinates and map.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="map">
                0 = Felucca
                1 = Trammel
                2 = Ilshenar
                3 = Malas
                4 = Tokuno
                5 = TerMur
            </param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Statics.GetLandName(System.Int32)">
            <summary>
            Land: Get the name of a Land item given the StaticID.
            </summary>
            <param name="StaticID">Land item StaticID.</param>
            <returns>The name of the Land item.</returns>
        </member>
        <member name="M:RazorEnhanced.Statics.GetTileName(System.Int32)">
            <summary>
            Tile: Get the name of a Tile item given the StaticID.
            </summary>
            <param name="StaticID">Tile item StaticID.</param>
            <returns>The name of the Land item.</returns>
        </member>
        <member name="M:RazorEnhanced.Statics.GetTileHeight(System.Int32)">
            <summary>
            Tile: Get hight of a Tile item, in Z coordinate reference.
            </summary>
            <param name="StaticID">Tile item StaticID.</param>
            <returns>Height of a Tile item.</returns>
        </member>
        <member name="M:RazorEnhanced.Statics.GetTileFlag(System.Int32,System.String)">
            <summary>
            Tile: Check Flag value of a given Tile item.
            </summary>
            <param name="StaticID">StaticID of a Tile item.</param>
            <param name="flagname">
                None
                Translucent
                Wall
                Damaging
                Impassable
                Surface
                Bridge
                Window
                NoShoot
                Foliage
                HoverOver
                Roof
                Door
                Wet
            </param>
            <returns>True: if the Flag is active - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Statics.GetLandFlag(System.Int32,System.String)">
            <summary>
            Land: Check Flag value of a given Land item.
            </summary>
            <param name="staticID">StaticID of a Land item.</param>
            <param name="flagname">
                None
                Translucent
                Wall
                Damaging
                Impassable
                Surface
                Bridge
                Window
                NoShoot
                Foliage
                HoverOver
                Roof
                Door
                Wet
            </param>
            <returns>True: if the Flag is active - False: otherwise</returns>
        </member>
        <member name="T:RazorEnhanced.Statics.TileInfo">
            <summary>
            The TileInfo class hold the values represeting Tile or Land items for a given X,Y coordinate.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Statics.GetStaticsLandInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Land: Return a TileInfo representing the Land item for a given X,Y, map.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="map">
                0 = Felucca
                1 = Trammel
                2 = Ilshenar
                3 = Malas
                4 = Tokuno
                5 = TerMur
            </param>
            <returns>A single TileInfo related a Land item.</returns>
        </member>
        <member name="M:RazorEnhanced.Statics.GetStaticsTileInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Tile: Return a list of TileInfo representing the Tile items for a given X,Y, map.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="map">
                0 = Felucca
                1 = Trammel
                2 = Ilshenar
                3 = Malas
                4 = Tokuno
                5 = TerMur
            </param>
            <returns>A list of TileInfo related to Tile items.</returns>
        </member>
        <member name="M:RazorEnhanced.Statics.CheckDeedHouse(System.Int32,System.Int32)">
            <summary>
            Check if the given Tile is occupied by a private house.
            Need to be in-sight, on most servers the maximum distance is 18 tiles.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>True: The tile is occupied - False: otherwise</returns>
        </member>
        <member name="T:RazorEnhanced.HotKeyEvent">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.HotKeyEvent.LastEvent">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.HotKeyEvent.HotKey">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.HotKeyEvent.Timestamp">
            <summary>@nodoc</summary>
        </member>
        <member name="M:RazorEnhanced.HotKeyEvent.AddEvent(System.Windows.Forms.Keys)">
            <summary>@nodoc</summary>
        </member>
        <member name="M:RazorEnhanced.HotKeyEvent.#ctor(System.Windows.Forms.Keys)">
            <summary>@nodoc</summary>
        </member>
        <member name="T:RazorEnhanced.DPSMeter">
            <summary>
            The DPSMeter class implements a Damage Per Second meter which can be useful to tune meta-builds.(???)
            </summary>
        </member>
        <member name="M:RazorEnhanced.DPSMeter.Status">
            <summary>
            Check DPSMeter Agent status, returns a bool value.
            </summary>
            <returns>True: is running - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.DPSMeter.Start">
            <summary>
            Start DPSMeter engine.
            </summary>
        </member>
        <member name="M:RazorEnhanced.DPSMeter.Stop">
            <summary>
            Stop DPSMeter engine.
            </summary>
        </member>
        <member name="M:RazorEnhanced.DPSMeter.Pause">
            <summary>
            Pause DPSMeter data recording.
            </summary>
        </member>
        <member name="M:RazorEnhanced.DPSMeter.GetDamage(System.Int32)">
            <summary>
            Get total damage per Mobile.
            </summary>
            <param name="serial">Serial of the Mobile.</param>
            <returns>Total damage.</returns>
        </member>
        <member name="M:RazorEnhanced.BandageHeal.Start">
            <summary>
            Start BandageHeal Agent.
            </summary>
        </member>
        <member name="M:RazorEnhanced.BandageHeal.Stop">
            <summary>
            Stop BandageHeal Agent.
            </summary>
        </member>
        <member name="M:RazorEnhanced.BandageHeal.Status">
            <summary>
            Check BandageHeal Agent status, returns a bool value.
            </summary>
            <returns>True: is running - False: otherwise</returns>
        </member>
        <member name="T:RazorEnhanced.Restock">
            <summary>
            The Restock class allow you to interact with the Restock Agent, via scripting.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Restock.FStart">
            <summary>
            Start the Restock Agent on the currently active list.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Restock.FStop">
            <summary>
            Stop the Restock Agent.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Restock.Status">
            <summary>
            Check Restock Agent status
            </summary>
            <returns>True: if the Restock is running - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Restock.ChangeList(System.String)">
            <summary>
            Change the Restock's active list.
            </summary>
            <param name="listName">Name of an existing restock list.</param>
        </member>
        <member name="T:RazorEnhanced.Target">
            <summary>
            The Target class provides various methods for targeting Land, Items and Mobiles in game.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.HasTarget(System.String)">
            <summary>
            Get the status of the in-game target cursor
            Optionally specify the target flag and check if the cursor is "Beneficial", "Harmful", or "Neutral".
            </summary>
            <param name="targetFlag">The target flag to check for can be "Any", "Beneficial", "Harmful", or "Neutral".</param>
            <returns>True if the client has a target cursor and the optional flag matches; otherwise, false.</returns>
        </member>
        <member name="M:RazorEnhanced.Target.WaitForTarget(System.Int32,System.Boolean)">
            <summary>
            Wait for the cursor to show the target, pause the script for a maximum amount of time. and optional flag True or False. True Not show cursor, false show it
            </summary>
            <param name="delay">Maximum amount to wait, in milliseconds</param>
            <param name="noshow">Pevent the cursor to display the target.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Target.WaitForTargetOrFizzle(System.Int32,System.Boolean)">
            <summary>
            Wait for the cursor to show the target, or the sound for fizzle (0x5c) or pause the script for a maximum amount of time. 
            and an optional flag True or False. True Not show cursor, false show it
            </summary>
            <param name="delay">Maximum amount to wait, in milliseconds</param>
            <param name="noshow">Prevent the cursor to display the target.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Target.TargetExecute(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Execute target on specific serial, item, mobile, X Y Z point.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <param name="StaticID">ID of Land/Tile</param>
        </member>
        <member name="M:RazorEnhanced.Target.TargetExecute(System.Int32)">
            <param name="serial">Serial of the Target</param>
        </member>
        <member name="M:RazorEnhanced.Target.TargetExecute(Assistant.UOEntity)">
            <summary>
            Targets the Mobil or Item specified
            </summary>       
            <param name="entity">object can be a Mobil or an Item.</param>
        </member>
        <member name="M:RazorEnhanced.Target.TargetType(System.Int32,System.Int32,System.Int32,System.String,System.Collections.Generic.List{System.Byte})">
            <summary>
            Targets the entity of a specific Graphic.
            </summary>
            <param name="graphic">Graphic of an Entity.</param>
            <param name="color">Color of an Entity. (default: -1)</param>
            <param name="range">Range to scan for an Entity. (default: 20)</param>
            <param name="selector">Selector for sorting the Entity. (default: Nearest)</param>
            <param name="notoriety">Notorieties of an Entity. (default: None -> all)</param>
            <returns>if the attack was achieved. (true: target succeeded)</returns>
        </member>
        <member name="M:RazorEnhanced.Target.TargetExecuteRelative(RazorEnhanced.Mobile,System.Int32)">
            <summary>
            Execute target on specific land point with offset distance from Mobile. Distance is calculated by target Mobile.Direction.
            </summary>
            <param name="mobile">Mobile object to target.</param>
            <param name="offset">Distance from the target.</param>
        </member>
        <member name="M:RazorEnhanced.Target.TargetExecuteRelative(System.Int32,System.Int32)">
            <param name="serial">Serial of the mobile</param>
            <param name="offset">+- distance to offset from the mobile identified with serial</param>
        </member>
        <member name="M:RazorEnhanced.Target.TargetResource(System.Int32,System.Int32)">
            <summary>
            Find and target a resource using the specified item.
            </summary>
            <param name="item_serial">Item object to use.</param>
            <param name="resource_number"> Resource as standard name or custom number
                0: ore
                1: sand
                2: wood
                3: graves
                4: red_mushrooms
                n: custom 
            </param>
        </member>
        <member name="M:RazorEnhanced.Target.TargetResource(RazorEnhanced.Item,System.String)">
            <param name="item">Item object to use.</param>
            <param name="resouce_name">name of the resource to be targeted. ore, sand, wood, graves, red mushroom</param>
        </member>
        <member name="M:RazorEnhanced.Target.Cancel">
            <summary>
            Cancel the current target.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.Self">
            <summary>
            Execute the target on the Player.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.SelfQueued">
            <summary>
            Enqueue the next target on the Player.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.Last">
            <summary>
            Execute the target on the last Item or Mobile targeted.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.LastQueued">
            <summary>
            Enqueue the next target on the last Item or Mobile targeted.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.LastUsedObject">
            <summary>
            Returns the serial of last object used by the player.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.GetLast">
            <summary>
            Get serial number of last target
            </summary>
            <returns>Serial as number.</returns>
        </member>
        <member name="M:RazorEnhanced.Target.GetLastAttack">
            <summary>
            Get serial number of last attack target
            </summary>
            <returns>Serial as number.</returns>
        </member>
        <member name="M:RazorEnhanced.Target.SetLast(System.Int32,System.Boolean)">
            <summary>
            Set the last target to specific mobile, using the serial.
            </summary>
            <param name="serial">Serial of the Mobile.</param>
            <param name="wait">Wait confirmation from the server.</param>
        </member>
        <member name="M:RazorEnhanced.Target.ClearLastAttack">
            <summary>
            Clear the last attacked target
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.ClearQueue">
            <summary>
            Clear Queue Target.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.ClearLast">
            <summary>
            Clear the last target.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.ClearLastandQueue">
            <summary>
            Clear last target and target queue.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Target.PromptTarget(System.String,System.Int32)">
            <summary>
            Prompt a target in-game, wait for the Player to select an Item or a Mobile. Can also specific a text message for prompt.
            </summary>
            <param name="message">Hint on what to select.</param>
            <param name="color">Color of the message. (default: 945, gray)</param>
            <returns>Serial of the selected object.</returns>
        </member>
        <member name="M:RazorEnhanced.Target.PromptGroundTarget(System.String,System.Int32)">
            <summary>
            Prompt a target in-game, wait for the Player to select the ground. Can also specific a text message for prompt.
            </summary>
            <param name="message">Hint on what to select.</param>
            <param name="color">Color of the message. (default: 945, gray)</param>
            <returns>A Point3D object, containing the X,Y,Z coordinate</returns>
        </member>
        <member name="M:RazorEnhanced.Target.SetLastTargetFromList(System.String)">
            <summary>
            Set Last Target from GUI filter selector, in Targetting tab.
            </summary>
            <param name="target_name">Name of the target filter.</param>
        </member>
        <member name="M:RazorEnhanced.Target.GetTargetFromList(System.String)">
            <summary>
            Get Mobile object from GUI filter selector, in Targetting tab.
            </summary>
            <param name="target_name">Name of the target filter.</param>
            <returns>Mobile object matching. None: not found</returns>
        </member>
        <member name="M:RazorEnhanced.Target.PerformTargetFromList(System.String)">
            <summary>
            Execute Target from GUI filter selector, in Targetting tab.
            </summary>
            <param name="target_name">Name of the target filter.</param>
        </member>
        <member name="M:RazorEnhanced.Target.AttackTargetFromList(System.String)">
            <summary>
            Attack Target from gui filter selector, in Targetting tab.
            </summary>
            <param name="target_name"></param>
        </member>
        <member name="T:RazorEnhanced.Journal">
            <summary>
            The Journal class provides access to the message Journal.
            </summary>
        </member>
        <member name="T:RazorEnhanced.Journal.JournalEntry">
            <summary>
            The JournalEntry class rapresents a line in the Journal.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Journal.JournalEntry.Text">
            <summary>
            Actual content of the Journal Line.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Journal.JournalEntry.Type">
            <summary>
                Regular
                System
                Emote
                Label
                Focus
                Whisper
                Yell
                Spell
                Guild
                Alliance
                Party
                Encoded
                Special
            </summary>
        </member>
        <member name="P:RazorEnhanced.Journal.JournalEntry.Color">
            <summary>
            Color of the text.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Journal.JournalEntry.Name">
            <summary>
            Name of the source, can be a Mobile or an Item.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Journal.JournalEntry.Serial">
            <summary>
            Name of the source, can be a Mobile or an Item.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Journal.JournalEntry.Timestamp">
            <summary>
            Timestamp as UnixTime, the number of seconds elapsed since 01-Jan-1970.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Journal.GetJournalEntry(System.Double)">
            <summary>
            Get a copy of all Journal lines as JournalEntry. The list can be filtered to include *only* most recent events.
            </summary>
            <param name="afterTimestap">Timestap as UnixTime, the number of seconds elapsed since 01-Jan-1970. (default: -1, no filter)</param>
            <returns>List of JournalEntry</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.GetJournalEntry(RazorEnhanced.Journal.JournalEntry)">
            <summary>
            Get a copy of all Journal lines as JournalEntry. The list can be filtered to include *only* most recent events.
            </summary>
            <param name="afterJournalEntry">A JournalEntry object (default: null, no filter)</param>
            <returns>List of JournalEntry</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.Clear">
            <summary>
            Removes all entry from the Jorunal. 
            </summary>
        </member>
        <member name="M:RazorEnhanced.Journal.Clear(System.String)">
            <summary>
            Removes all matching entry from the Jorunal. 
            </summary>
        </member>
        <member name="M:RazorEnhanced.Journal.Search(System.String)">
            <summary>
            Search in the Journal for the occurrence of text. (case sensitive)
            </summary>
            <param name="text">Text to search.</param>
            <returns>True: Text is found - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.FilterText(System.String)">
            <summary>
            Store a string that if matched, will block journal message ( case insensitive )
            </summary>
            <param name="text">Text to block. case insensitive, and will match if the incoming message contains the text</param>
            <returns>void</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.RemoveFilterText(System.String)">
            <summary>
            Remove a stored a string that if matched, would block journal message ( case insensitive )
            </summary>
            <param name="text">Text to no longer block. case insensitive</param>
            <returns>void</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.SearchByName(System.String,System.String)">
            <summary>
            Search in the Journal for the occurrence of text, for a given source. (case sensitive)
            </summary>
            <param name="text">Text to search.</param>
            <param name="name">Name of the source.</param>
            <returns>True: Text is found - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.SearchByColor(System.String,System.Int32)">
            <summary>
            Search in the Journal for the occurrence of text, for a given color. (case sensitive)
            </summary>
            <param name="text">Text to search.</param>
            <param name="color">Color of the message.</param>
            <returns>True: Text is found - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.SearchByType(System.String,System.String)">
            <summary>
            Search in the Journal for the occurrence of text, for a given type. (case sensitive)
            </summary>
            <param name="text">Text to search.</param>
            <param name="type">
                Regular
                System
                Emote
                Label
                Focus
                Whisper
                Yell
                Spell
                Guild
                Alliance
                Party
                Encoded
                Special
            </param>
            <returns>True: Text is found - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.GetLineText(System.String,System.Boolean)">
            <summary>
            Search and return the most recent line Journal containing the given text. (case sensitive)
            </summary>
            <param name="text">Text to search.</param>
            <param name="addname">Prepend source name. (default: False)</param>
            <returns>Return the full line - Empty string if not found.</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.GetTextBySerial(System.Int32,System.Boolean)">
            <summary>
            Returns all the lines present in the Journal for a given serial.
            </summary>
            <param name="serial">Serial of the source.</param>
            <param name="addname">Prepend source name. (default: False)</param>
            <returns>A list of Journal as lines of text.</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.GetTextByColor(System.Int32,System.Boolean)">
            <summary>
            Returns all the lines present in the Journal for a given color.
            </summary>
            <param name="color">Color of the source.</param>
            <param name="addname">Prepend source name. (default: False)</param>
            <returns>A list of Journal as lines of text.</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.GetTextByName(System.String,System.Boolean)">
            <summary>
            Returns all the lines present in the Journal for a given source name. (case sensitive)
            </summary>
            <param name="name">Name of the source.</param>
            <param name="addname">Prepend source name. (default: False)</param>
            <returns>A list of Journal as lines of text.</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.GetTextByType(System.String,System.Boolean)">
            <summary>
            Returns all the lines present in the Journal for a given type. (case sensitive)
            </summary>
            <param name="type">
                Regular
                System
                Emote
                Label
                Focus
                Whisper
                Yell
                Spell
                Guild
                Alliance
                Party
                Encoded
                Special
            </param>
            <param name="addname">Prepend source name. (default: False)</param>
            <returns>A list of Journal as lines of text.</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.GetSpeechName">
            <summary>
            Get list of speakers.
            </summary>
            <returns>List of speakers as text.</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.WaitJournal(System.String,System.Int32)">
            <summary>
            Pause script and wait for maximum amount of time, for a specific text to appear in Journal. (case sensitive)
            </summary>
            <param name="text">Text to search.</param>
            <param name="delay">Maximum pause in milliseconds.</param>
            <returns>True: Text is found - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.WaitJournal(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Pause script and wait for maximum amount of time, for any of the text in the list to appear in Journal. (case sensitive)
            </summary>
            <param name="msgs">List of text to search.</param>
            <param name="delay">Maximum pause in milliseconds.</param>
            <returns>Return the first line in the journal. Empty string: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Journal.WaitByName(System.String,System.Int32)">
            <summary>
            Pause script and wait for maximum amount of time, for a specific source to appear in Jorunal. (case sensitive)
            </summary>
            <param name="name">Name of the source.</param>
            <param name="delay">Maximum pause in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="T:RazorEnhanced.AutoLoot">
            <summary>
            The Autoloot class allow to interact with the Autoloot Agent, via scripting.
            </summary>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.ResetIgnore">
            <summary>
            Reset the Autoloot ignore list.
            </summary>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.RunOnce(System.String,System.Int32,RazorEnhanced.Items.Filter)">
            <summary>
            Start Autoloot with custom parameters.
            </summary>
            <param name="lootListName">Name of the Autoloot listfilter for search on ground.</param>
            <param name="millisec">Delay in milliseconds. (unused)</param>
            <param name="filter">Item filter</param>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.SetNoOpenCorpse(System.Boolean)">
            <summary>
            Toggle "No Open Corpse" on/off. The change doesn't persist if you reopen razor.
            </summary>
            <param name="noOpen">True: "No Open Corpse" is active - False: otherwise</param>
            <returns>Previous value of "No Open Corpse"</returns>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.GetList(System.String,System.Boolean)">
            <summary>
            Given an AutoLoot list name, return a list of AutoLootItem associated.
            </summary>
            <param name="lootListName">Name of the AutoLoot list.</param>
            <returns></returns>
        </member>
        <member name="F:RazorEnhanced.AutoLoot.lootChangeMsgSent">
            <summary>
            @nodoc
            </summary>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.GetLootBag">
            <summary>
            Get current Autoloot destination container.
            </summary>
            <returns>Serial of the container.</returns>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.Start">
            <summary>
            Start the Autoloot Agent on the currently active list.
            </summary>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.Stop">
            <summary>
            Stop the Autoloot Agent.
            </summary>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.Status">
            <summary>
            Check Autoloot Agent status
            </summary>
            <returns>True: if the Autoloot is running - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.AutoLoot.ChangeList(System.String)">
            <summary>
            Change the Autoloot's active list.
            </summary>
            <param name="listName">Name of an existing organizer list.</param>
        </member>
        <member name="M:RazorEnhanced.Dress.DressStatus">
            <summary>
            Check Dress Agent status, returns a bool value.
            </summary>
            <returns>True: is running - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Dress.UnDressStatus">
            <summary>
            Check UnDress Agent status, returns a bool value.
            </summary>
            <returns>True: is running - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Dress.DressFStart">
            <summary>
            Start Dress engine.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Dress.UnDressFStart">
            <summary>
            Start UnDress engine.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Dress.DressFStop">
            <summary>
            Stop Dress engine.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Dress.UnDressFStop">
            <summary>
            Stop UnDress engine.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Dress.ChangeList(System.String)">
            <summary>
            Change dress list, List must be exist in dress/undress Agent tab.
            </summary>
            <param name="dresslist">Name of the list of friend.</param>
        </member>
        <member name="T:RazorEnhanced.Gumps">
            <summary>
            The Gumps class is used to read and interact with in-game gumps, via scripting.
            
            NOTE
            ----
            During development of scripts that involves interecting with Gumps, is often needed to know gumpids and buttonids.
            For this purpose, can be particularly usefull to use *Inspect Gumps* and *Record*, top right, in the internal RE script editor.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Gumps.IsValid(System.Int32)">
            <summary>
            Validates if the gumpid provided exists in the gump file
            </summary>
            <param name="gumpId"> The id of the gump to check for in the gumps.mul file</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.CreateGump(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an initialized GumpData structure
            </summary>
            <param name="movable"> allow the gump to be moved</param>
            <param name="closable"> allow the gump to be right clicked to close</param>
            <param name="disposable"> allow the gump to be disposed (beats me what it does)</param>
            <param name="resizeable"> allow the gump to be resized</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddPage(RazorEnhanced.Gumps.GumpData@,System.Int32)">
            <summary>
            Add a page for the gump to have additional pages
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="page"> the number of the page being added</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddAlphaRegion(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an alpha region for the gump. Its a transparent background
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the transparent backround</param>
            <param name="height"> height of the transparent backround</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddBackground(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a textured background for the gump. Its a transparent background
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the transparent backround</param>
            <param name="height"> height of the transparent backround</param>
            <param name="gumpId"> The gumpId from gumps.mul that will be used for background</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddButton(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a button to the gump
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="normalID"> id of the button to used when unpressed</param>
            <param name="pressedID"> id of the button to show when button is pressed</param>
            <param name="buttonID"> button id to return if this is pressed</param>
            <param name="type"> button can have a type of 0 - Page or 1 - Reply (I have no idea what Page does)</param>
            <param name="param"> button can have a param of any integer (I have no idea what param does)</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddCheck(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Add a checkbox to the gump
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="inactiveID"> id of the checkmark to used when unclicked</param>
            <param name="activeID"> id of the checkmark to use when clicked</param>
            <param name="initialState"> active or inactive initially</param>
            <param name="switchID"> switch id to return if this is changed</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddGroup(RazorEnhanced.Gumps.GumpData@,System.Int32)">
            <summary>
            Add group to the gump
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="group"> group identifier (I have no idea what this control does)</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddTooltip(RazorEnhanced.Gumps.GumpData@,System.Int32)">
            <summary>
            Add tooltip to the previously added control
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="number"> cliloc for tooltip</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddTooltip(RazorEnhanced.Gumps.GumpData@,System.String)">
            <summary>
            Add tooltip to the previously added control
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="text"> string for tooltip</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddTooltip(RazorEnhanced.Gumps.GumpData@,System.Int32,System.String)">
            <summary>
            Add tooltip to the previously added control
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="cliloc"> cliloc for tooltip</param>
            <param name="text"> string for tooltip</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddHtml(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a textured background for the gump. Its a transparent background
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the html block</param>
            <param name="height"> height of the html block</param>
            <param name="text"> The html text to be shown</param>
            <param name="background"> False makes background transparent</param>
            <param name="scrollbar"> True adds a scroll bar to the control</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddHtml(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Add a textured background for the gump. Its a transparent background
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the html block</param>
            <param name="height"> height of the html block</param>
            <param name="textID"> An index (zero based) into the string being passed</param>
            <param name="background"> False makes background transparent</param>
            <param name="scrollbar"> True adds a scroll bar to the control</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddHtmlLocalized(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            No idea at all why this is different than the OTHER htmml, but SERVEUO had it
            </summary>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddHtmlLocalized(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            No idea at all why this is different than the OTHER htmml, but SERVEUO had it
            </summary>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddHtmlLocalized(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            No idea at all why this is different than the OTHER htmml, but SERVEUO had it
            </summary>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddImage(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add image from the Gumps.mul
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="gumpId"> id used to reference gumps.mul</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddSpriteImage(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add image from a sprite sheet
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> X co-ordinate of the origin</param>
            <param name="y"> Y co-ordinate of the origin</param>
            <param name="gumpId"> ID used to reference sprite sheet from gumps.mul</param>
            <param name="spriteX"> X position on the sprite sheet where the sprite begins</param>
            <param name="spriteY"> Y position on the sprite sheet where the sprite begins</param>
            <param name="spriteW"> Width of the sprite</param>
            <param name="spriteH"> Height of the sprite</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddImage(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add hued image from the Gumps.mul
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="gumpId"> id used to reference gumps.mul</param>
            <param name="hue"> to re-color the image</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddImageTiled(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add image from the Gumps.mul replicated enough to fill an area
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the area</param>
            <param name="height"> height of the area</param>
            <param name="gumpId">id of gump to be added</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddImageTiledButton(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,RazorEnhanced.Gumps.GumpButtonType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add button from the Gumps.mul replicated enough to fill an area (guessing)
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="normalID"> id of the button to used when unpressed</param>
            <param name="pressedID"> id of the button to show when button is pressed</param>
            <param name="buttonID"> button id to return if this is pressed</param>
            <param name="type"> button can have a type of 0 - Page or 1 - Reply (I have no idea what Page does)</param>
            <param name="param"> button can have a param of any integer (I have no idea what param does)</param>
            <param name="itemID"> maybe the button id to be used?</param>
            <param name="hue"> color to apply to image</param>
            <param name="width"> width of the area</param>
            <param name="height"> height of the area</param>       
        </member>
        <member name="M:RazorEnhanced.Gumps.AddImageTiledButton(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,RazorEnhanced.Gumps.GumpButtonType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add button from the Gumps.mul replicated enough to fill an area (guessing)
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="normalID"> id of the button to used when unpressed</param>
            <param name="pressedID"> id of the button to show when button is pressed</param>
            <param name="buttonID"> button id to return if this is pressed</param>
            <param name="type"> button can have a type of 0 - Page or 1 - Reply (I have no idea what Page does)</param>
            <param name="param"> button can have a param of any integer (I have no idea what param does)</param>
            <param name="itemID"> maybe the button id to be used?</param>
            <param name="hue"> color to apply to image</param>
            <param name="width"> width of the area</param>
            <param name="height"> height of the area</param>       
            <param name="localizedTooltip"> cliloc to use as tooltip</param> 
        </member>
        <member name="M:RazorEnhanced.Gumps.AddItem(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an item from the statics.mul
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="itemID"> id used to reference statics.mul</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddItem(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a re-colored item from the statics.mul
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="itemID"> id used to reference statics.mul</param>
            <param name="hue"> to re-color the image</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddLabel(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Add colored text to gump
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="hue"> to color the text</param>
            <param name="text"> text string to be displayed</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddLabel(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add colored text to gump
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="hue"> to color the text</param>
            <param name="textID"> index into string passed to the gump</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddLabelCropped(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Add colored text to gump, will be truncated if area is too small
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the area</param>
            <param name="height"> height of the area</param>       
            <param name="hue"> to color the text</param>
            <param name="text"> text string to be displayed</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddLabelCropped(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add colored text to gump, will be truncated if area is too small
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the area</param>
            <param name="height"> height of the area</param>       
            <param name="hue"> to color the text</param>
            <param name="textID"> index into string list passed to gump</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddRadio(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Add a radio button to the gump
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="inactiveID"> id of the checkmark to used when unclicked</param>
            <param name="activeID"> id of the checkmark to use when clicked</param>
            <param name="initialState"> active or inactive initially</param>
            <param name="switchID"> switch id to return if this is changed</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddTextEntry(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Add a text entry field to the gump
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the area</param>
            <param name="height"> height of the area</param>       
            <param name="hue"> to color the text</param>
            <param name="entryID"> id to be returned with text to identify the input field</param>
            <param name="initialText"> initial text string to be displayed</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddTextEntry(RazorEnhanced.Gumps.GumpData@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a text entry field to the gump
            </summary>
            <param name="gd"> GumpData structure</param>
            <param name="x"> x co-ordinate of the origin</param>
            <param name="y"> y co-ordinate of the origin</param>
            <param name="width"> width of the area</param>
            <param name="height"> height of the area</param>       
            <param name="hue"> to color the text</param>
            <param name="entryID"> id to be returned with text to identify the input field</param>
            <param name="initialTextID"> index into the list of strings passed to the gump</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.SendGump(RazorEnhanced.Gumps.GumpData,System.UInt32,System.UInt32)">
             <summary>
             Sends a gump using an existing GumpData structure
             </summary>
            
        </member>
        <member name="M:RazorEnhanced.Gumps.SendGump(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Hack some gump test stuff
             </summary>
            
        </member>
        <member name="M:RazorEnhanced.Gumps.CloseGump(System.UInt32)">
            <summary>
            Close a specific Gump.
            </summary>
            <param name="gumpid">ID of the gump</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.ResetGump">
            <summary>
            Clean current status of Gumps.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Gumps.CurrentGump">
            <summary>
            Return the ID of most recent, still open Gump.
            </summary>
            <returns>ID of gump.</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.HasGump">
            <summary>
            Get status if have a gump open or not.
            </summary>
            <returns>True: There is a Gump open - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.WaitForGump(IronPython.Runtime.PythonList,System.Int32)">
            <summary>@nodoc @experimental
            wait for one of a list of gump ids
            </summary>
            <returns>True: one of the ids appeared - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.WaitForGump(System.UInt32,System.Int32)">
            <summary>
            Waits for a specific Gump to appear, for a maximum amount of time. If gumpid is 0 it will match any Gump.
            </summary>
            <param name="gumpid">ID of the gump. (0: any)</param>
            <param name="delay">Maximum wait, in milliseconds.</param>
            <returns>True: wait found the gump - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.AddResponse(System.UInt32,System.Int32,System.Int32,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String[],System.String[])">
            <summary>
            Adds a response to the gump
            </summary>
            WorldResponse
        </member>
        <member name="M:RazorEnhanced.Gumps.SendAction(System.UInt32,System.Int32)">
            <summary>
            Send a Gump response by gumpid and buttonid.
            </summary>
            <param name="gumpid">ID of the gump.</param>
            <param name="buttonid">ID of the Button to press.</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.SendAdvancedAction(System.UInt32,System.Int32,IronPython.Runtime.PythonList)">
            <summary>
            This method can also be used only Switches, without Text fileds.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Gumps.SendAdvancedAction(System.UInt32,System.Int32,IronPython.Runtime.PythonList,IronPython.Runtime.PythonList)">
            <summary>
            This method can also be used only Text fileds, without Switches.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Gumps.SendAdvancedAction(System.UInt32,System.Int32,IronPython.Runtime.PythonList,IronPython.Runtime.PythonList,IronPython.Runtime.PythonList)">
            <summary>
            Send a Gump response, with gumpid and buttonid and advanced switch in gumps. 
            This function is intended for more complex Gumps, with not only Buttons, but also Switches, CheckBoxes and Text fileds.
            </summary>
            <param name="gumpid">ID of the gump.</param>
            <param name="buttonid">ID of the Button.</param>
            <param name="switchlist_id">List of ID of ON/Active switches. (empty: all Switches OFF)</param>
            <param name="textlist_id">List of ID of Text fileds. (empty: all text fileds empty )</param>
            <param name="textlist_str">List of the contents of the Text fields, provided in the same order as textlist_id.</param>
        </member>
        <member name="M:RazorEnhanced.Gumps.GetResolvedStringPieces(System.UInt32)">
            <summary>
            @nodoc  
            Testing, I'll remove nodoc after a while @todo Credzba
            Text pieces and HTML pieces have a reference to a seperate 
            string list (for performance? maybe) 
            This matches up the entries, and return the pieces as they were in layout, 
            but with the associated string appended.
            e.g. piece Text 14 200 2  and stringlist (a, b, c, d)
            the Resolved string ould be Text 14 200 2, c
            I added the comma to make it easy to parse Text from data
            </summary>
            <param name="gumpId">gump id to get data from</param>
            <returns>Text content of the line. (empty: line not found)</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.GetLine(System.UInt32,System.Int32)">
            <summary>
            Get a specific DATA line from the gumpId if it exists. Filter by line number.
            The textual strings are not considered
            </summary>
            <param name="gumpId">gump id to get data from</param>
            <param name="line_num">Number of the line.</param>
            <returns>Text content of the line. (empty: line not found)</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.LastGumpGetLine(System.Int32)">
            <summary>
            Get a specific line from the most recent and still open Gump. Filter by line number.
            The text constants on the gump ARE included in indexing
            </summary>
            <param name="line_num">Number of the line.</param>
            <returns>Text content of the line. (empty: line not found)</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.GetLineList(System.UInt32,System.Boolean)">
            <summary>
            Get all text from the specified Gump if still open
            </summary>
            <param name="gumpId">gump id to get data from</param>
            <returns>Text of the gump.</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.LastGumpGetLineList">
            <summary>
            Get all text from the most recent and still open Gump.
            </summary>
            <returns>Text of the gump.</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.LastGumpTextExist(System.String)">
            <summary>
            Search for text inside the most recent and still open Gump.
            </summary>
            <param name="text">Text to search.</param>
            <returns>True: Text found in active Gump - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.LastGumpTextExistByLine(System.Int32,System.String)">
            <summary>
            Search for text, in a spacific line of the most recent and still open Gump.
            </summary>
            <param name="line_num">Number of the line.</param>
            <param name="text">Text to search.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.GetGumpRawText(System.UInt32)">
            <summary>@nodoc @deprecate
            In the future I'd like this to be the RAW version of the text,
            meaning the cliloc number before translation. 
            For language independent code, the numbers would be more useful than the text</summary>
            <param name="gumpid"></param>
            <returns>List<string></string></returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.GetGumpText(System.UInt32)">
            <summary>
            Get the Text of a specific Gump.
            It is the cliloc translation of the #s in the gump
            </summary>
            <returns>List of Text in the gump</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.GetGumpRawData(System.UInt32)">
            <summary>@nodoc @deprecate</summary>
            kept only for backward compatibility 9/4/2024.
            Should be removed in future
            
        </member>
        <member name="M:RazorEnhanced.Gumps.GetGumpRawLayout(System.UInt32)">
            <summary>
            Get the Raw layout (definition) of a specific gumpid
            </summary>
            <returns>layout (definition) of the gump.</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.LastGumpRawLayout">
            <summary>
            Get the raw layout (definition) of the most recent and still open Gump.
            </summary>
            <returns>layout (definition) of the gump.</returns>
        </member>
        <member name="M:RazorEnhanced.Gumps.LastGumpTile">
            <summary>
            Get the list of Gump Tile (! this documentation is a stub !) 
            </summary>
            <returns>List of Gump Tile.</returns>
        </member>
        <member name="T:RazorEnhanced.Trade.TradeData">
            <summary>
            SecureTrades holds the information about a single tradeing window.
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.TradeID">
            <summary>
            ID of the Trade.
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.LastUpdate">
            <summary>
            Last update of the Trade as UnixTime ( format: "Seconds,Milliseconds" from 1-1-1970 )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.SerialTrader">
            <summary>
            Serial of the Trader (other) .
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.NameTrader">
            <summary>
            Name of the Trader (other).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.ContainerMe">
            <summary>
            Serial of the container holding the items offerd by the Player (me).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.ContainerTrader">
            <summary>
            Serial of the container holding the items offerd by the Trader (other).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.GoldMax">
            <summary>
            Maximum amount of Gold available for the Player (me).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.PlatinumMax">
            <summary>
            Maximum amount of Platinum available for the Player (me).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.GoldMe">
            <summary>
            Amount of Gold offerd by the Player (me).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.PlatinumMe">
            <summary>
            Amount of Platinum offerd by the Player (me).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.GoldTrader">
            <summary>
            Amount of Gold offerd by the Trader (other).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.PlatinumTrader">
            <summary>
            Amount of Platinum offerd by the Trader (other).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.AcceptMe">
            <summary>
            Trade has been accepted by the Player (me).
            </summary>
        </member>
        <member name="F:RazorEnhanced.Trade.TradeData.AcceptTrader">
            <summary>
            Trade has been accepted by the Trader (other).
            </summary>
        </member>
        <member name="M:RazorEnhanced.Trade.TradeList">
            <summary>
            Returns the list of currently active Secure Trading gumps, sorted by LastUpdate.
            </summary>
            <returns>A list of Player.SecureTrade objects. Each containing the details of each trade window.</returns>
        </member>
        <member name="M:RazorEnhanced.Trade.Accept(System.Int32,System.Boolean)">
            <summary>
            Set the accept state of the trade
            </summary>
            <param name="TradeID">ID of the Trade (Default = -1: Pick a random active trade)</param>
            <param name="accept">Set the state ofthe checkbox</param>
            <returns>True: Trade found, False: Trade not found</returns>
        </member>
        <member name="M:RazorEnhanced.Trade.Cancel(System.Int32)">
            <summary>
            Set the accept state of the trade
            </summary>
            <param name="TradeID">ID of the Trade (Default = -1: Pick a random active trade)</param>
            <returns>True: Trade found, False: Trade not found</returns>
        </member>
        <member name="M:RazorEnhanced.Trade.Offer(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Update the amount of gold and platinum in the trade. ( client view dosen't update )
            </summary>
            <param name="TradeID">ID of the Trade (Default = -1: Pick latest active trade)</param>
            <param name="gold">Amount of Gold to offer</param>
            <param name="platinum">Amount of Platinum to offer</param>
            <param name="quiet">Suppress output (Default: false - Show warning)</param>
            <returns>True: Trade found, False: Trade not found</returns>
        </member>
        <member name="F:RazorEnhanced.UI.RE_MessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.RE_MessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.RE_MessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedAgentAddList.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedAgentAddList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedAgentAddList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedChangeLog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedChangeLog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedChangeLog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedFriendAddGuildManual.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedFriendAddGuildManual.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedFriendAddGuildManual.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedObjectInspector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedObjectInspector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedObjectInspector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedStaticInspector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedProfileClone.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedProfileClone.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedProfileClone.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedProfileRename.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedProfileRename.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedProfileRename.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedProfileAdd.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedProfileAdd.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedProfileAdd.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedAutolootEditItemProps.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedAutolootEditItemProps.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedAutolootEditItemProps.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedFriendAddPlayerManual.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedFriendAddPlayerManual.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedFriendAddPlayerManual.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedDressAddUndressLayer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedDressAddUndressLayer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedDressAddUndressLayer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedGumpInspector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedGumpInspector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedGumpInspector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedLauncher.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedLauncher.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedLauncher.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedScavengerEditItemProps.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedScavengerEditItemProps.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedScavengerEditItemProps.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedItemInspector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedMobileInspector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RazorEnhanced.UI.EnhancedScriptEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedScriptEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RazorEnhanced.UI.EnhancedScriptEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RazorEnhanced.UI.MethodAutocompleteItemAdvance">
            <summary>
            This autocomplete item appears after dot
            </summary>
        </member>
        <member name="T:RazorEnhanced.UI.SubPropertiesAutocompleteItem">
            <summary>
            This autocomplete item appears after dot
            </summary>
        </member>
        <member name="M:RazorEnhanced.Friend.IsFriend(System.Int32)">
            <summary>
            Check if Player is in FriendList, returns a bool value.
            </summary>
            <param name="serial">Serial you want to check</param>
            <returns>True: if is a friend - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Friend.AddPlayer(System.String,System.String,System.Int32)">
            <summary>
            Add the player specified to the Friend list named in FriendListName parameter
            </summary>
            <param name="friendlist">Name of the the Friend List. (See Agent tab)</param>
            <param name="name">Name of the Friend want to add.</param>
            <param name="serial">Serial of the Friend you want to add.</param>
        </member>
        <member name="M:RazorEnhanced.Friend.RemoveFriend(System.String,System.Int32)">
            <summary>
            Remove the player specified from the Friend list named in FriendListName parameter
            </summary>
            <param name="friendlist">Name of the the Friend List. (See Agent tab)</param>
            <param name="serial">Serial of the Friend you want to remove.</param>
        </member>
        <member name="M:RazorEnhanced.Friend.ChangeList(System.String)">
            <summary>
            Change friend list, List must be exist in friend list GUI configuration
            </summary>
            <param name="friendlist">Name of the list of friend.</param>
        </member>
        <member name="M:RazorEnhanced.Friend.GetList(System.String)">
            <summary>
            Retrive list of serial in list, List must be exist in friend Agent tab.
            </summary>
            <param name="friendlist">Name of the list of friend.</param>
            <returns></returns>
        </member>
        <member name="T:RazorEnhanced.UOS.UOSteamEngine">
            <summary>
            This class contains all the methods available for the UOS scripts (.uos) 
            The following classes and commands ARE NOT available in python.
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CountContents(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            if contents (serial) ('operator') ('value')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CountType(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            counttype (graphic) (color) (source) (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.InJournal(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            if injournal ('text') ['author'/'system']
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ListExists(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            if listexists ('list name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.UseObjExp(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            useobject (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.FindAlias(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            findalias ('alias name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.LocationX(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            x (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.LocationY(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            y (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.LocationZ(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            z (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Organizing(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            if not organizing
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Restocking(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            if not restock
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.FindByType_ground(System.Int32,System.Int32,System.Int32,System.Int32)">
            The problem is UOS findbyid will find either mobil or item, but RE seperates them
            So this function will look for both and return the list
              if it is an item it can't be a mobile and vica-versa
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.FindType(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            findtype (graphic) [color] [source] [amount] [range or search level]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Property(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            property ('name') (serial) [operator] [value]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Durability(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            durability ('name') (serial) [operator] [value]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.InGump(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            ingump (gump id/'any') ('text')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.InWarMode(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            war (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsPoisoned(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            poisoned [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Name(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            name [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Color(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            color  (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsDead(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            dead [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.DirectionName(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            directionname [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Direction(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            direction [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsFlying(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            flying [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsParalyzed(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            paralyzed [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsMounted(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            mounted [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.YellowHits(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            yellowhits [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsCriminal(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            criminal [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsMurderer(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            murderer [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsEnemy(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            enemy serial
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsFriend(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            friend serial
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsGray(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            gray serial
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IsInnocent(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            innocent serial
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Bandage(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            bandage
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.GumpExists(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            gumpexists (gump id/'any')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ListCount(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            list ('list name') (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.InList(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            inlist ('list name') ('element value')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.SerialOf(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            serial ('target')
            returns the serial of the target be it mobile or item
            </summary>
            
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.SkillState(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            skillstate ('skill name') (operator) ('locked'/'up'/'down')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.InRegion(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            inregion ('guards'/'town'/'dungeon'/'forest') [serial] [range]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.FindWand(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            findwand NOT IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.InParty(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            inparty NOT IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.SkillBase(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            skillbase ('name') (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Skill(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            skill ('name') (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Amount(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            amount (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.FindObject(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            findobject (serial) [color] [source] [amount] [range]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Graphic(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            graphic (serial) (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Distance(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            distance (serial) (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.InRange(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            inrange (serial) (range)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.BuffExists(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            buffexists ('buff name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.FindLayer(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            findlayer (serial) (layer)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CountTypeGround(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            counttypeground (graphic) (color) (range) (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.InFriendList(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            infriendlist (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Timer(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
             timer ('timer name') (operator) (value)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TimerExists(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
             timerexists ('timer name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TargetExists(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
             targetexists ('Any' | 'Harmful' | 'Neutral' | 'Beneficial')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WaitingForTarget(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
             waitingfortarget POORLY IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Hits(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            hits [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.DiffHits(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            diffhits [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MaxHits(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            maxhits [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.LandCommand(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            land
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.FlyCommand(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            UOSteamEngine.FlyCommand
            <summary>
            fly
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.SetAbility(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            UOSteamEngine.SetAbility
            <summary>
            setability ('primary'/'secondary'/'stun'/'disarm') ['on'/'off']
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Attack(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            attack (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Walk(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            walk (direction)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.PathFindTo(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            pathfindto x y
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Run(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            run (direction)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Turn(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            turn (direction)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClearHands(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clearhands ('left'/'right'/'both')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClickObject(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clickobject (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.BandageSelf(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            bandageself
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.UseType(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            usetype (graphic) [color] [source] [range or search level]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.UseObject(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            useobject (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.UseOnce(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            useonce (graphic) [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CleanUseQueue(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clearusequeue resets the use once list
            </summary>
            
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MoveItem(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            (serial) (destination) [(x, y, z)] [amount]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.UseSkill(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            useskill ('skill name'/'last')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Feed(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            feed (serial) (graphic) [color] [amount]
            </summary>
            Feed doesn't support food groups etc unless someone adds it
            Config has the data now
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.RenamePet(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            rename (serial) ('name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ToggleHands(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            togglehands ('left'/'right')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.UnSetAlias(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            unsetalias (alias name)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.SetAlias(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            setalias (alias name) [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.PromptAlias(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            promptalias (alias name)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.HeadMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            headmsg ('text') [color] [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.PartyMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            partymsg ('text') [color] [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MsgCommand(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            msg text [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CreateList(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            createlist (list name)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.PushList(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            pushlist('list name') ('element value') ['front'/'back']
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MoveItemOffset(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            moveitemoffset (serial) 'ground|container' [(x, y, z)] [amount] 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MoveType(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean)">
            <summary>
            movetype (graphic) (source) (destination) [(x, y, z)] [color] [amount] [range or search level]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MoveTypeOffset(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            movetypeoffset (graphic) (source) 'ground' [(x, y, z)] [color] [amount] [range or search level]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.EquipItem(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            equipitem (serial) (layer)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ToggleMounted(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            togglemounted
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.EquipWand(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            NOT IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Buy(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            buy ('list name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Sell(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            sell ('list name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClearBuy(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clearbuy
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClearSell(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clearsell
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Restock(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            restock ('profile name') [source] [destination] [dragDelay]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Organizer(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            organizer ('profile name') [source] [destination] [dragDelay]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Autoloot(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            autoloot - NOT IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Dress(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            dress ['profile name']
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Undress(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            undress ['profile name']
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.DressConfig(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            dressconfig What is this supposed to do ? NOT IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ToggleAutoloot(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            toggleautoloot
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ToggleScavenger(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            togglescavenger
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Counter(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            counter ('format') (operator) (value) NOT IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WaitForGump(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            waitforgump (gump id/'any') (timeout)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ReplyGump(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            replygump gump-id button [switch ...]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CloseGump(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            closegump 'container' 'serial'
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.UniqueJournal(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            uniquejournal causes the journal for this script to not be impacted by journal changes in other scripts
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClearJournal(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clearjournal
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WaitForJournal(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            waitforjournal ('text') (timeout) 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.PopList(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            poplist ('list name') ('element value'/'front'/'back')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.RemoveList(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            removelist ('list name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClearList(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clearlist ('list name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Ping(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            ping
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.PlayMacro(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            playmacro 'name'
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.PlaySound(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            playsound (sound id/'file name') 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Resync(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            resync
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Snapshot(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            snapshot 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Hotkeys(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            hotkeys
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Where(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            where
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MessageBox(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            messagebox ('title') ('body')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MapUO(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            mapuo NOT IMPEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClickScreen(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clickscreen (x) (y) ['single'/'double'] ['left'/'right']
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Paperdoll(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            paperdoll
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.HelpButton(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            helpbutton  NOT IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.GuildButton(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            guildbutton 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.QuestsButton(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            questsbutton 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.LogoutButton(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            logoutbutton 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Virtue(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            virtue('honor'/'sacrifice'/'valor') 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.GuildMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            guildmsg ('text')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.AllyMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            allymsg ('text')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WhisperMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            whispermsg ('text') [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.YellMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            yellmsg ('text') [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Location(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            location (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.SysMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            sysmsg (text) [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ChatMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            chatmsg (text) [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.EmoteMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            emotemsg (text) [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.PromptMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            promptmsg (text) [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TimerMsg(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            timermsg (delay) (text) [color]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WaitForPrompt(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            waitforprompt (timeout)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CancelPrompt(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            cancelprompt 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.AddFriend(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            addfriend [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.RemoveFriend(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            removefriend NOT IMPLEMENTED
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ContextMenu(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            contextmenu (serial) (option)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WaitForContext(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            waitforcontext (serial) (option) (timeout)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.IgnoreObject(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            ignoreobject (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClearIgnoreList(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            clearignorelist
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.SetSkill(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            setskill ('skill name') ('locked'/'up'/'down')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WaitForProperties(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            waitforproperties (serial) (timeout)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.AutoColorPick(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            autocolorpick (color) (dyesSerial) (dyeTubSerial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WaitForContents(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            waitforcontents (serial) (timeout)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.MiniHeal(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            miniheal [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.BigHeal(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            bigheal [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Cast(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            cast (spell id/'spell name'/'last') [serial]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ChivalryHeal(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            chivalryheal [serial] 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WaitForTarget(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            waitfortarget (timeout)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CancelAutoTarget(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            cancelautotarget
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CancelTarget(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            canceltarget
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TargetResource(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            targetresource (serial) ('ore'/'sand'/'wood'/'graves'/'red mushrooms')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.Target(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            target (serial)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.GetEnemy(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            getenemy ('notoriety') ['filter']
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.GetFriend(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            getfriend ('notoriety') ['filter']
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ManageScripts(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            script ('run'|'stop'|'suspend'|'resume'|'isrunning'|'issuspended') [script_name] [output_alias]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ManageNamespaces(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            namespace 'isolation' (true|false)
            namespace 'list'
            namespace ('create'|'activate'|'delete') (namespace_name) 
            namespace 'move' (new_namespace_name) [old_namespace_name] ['merge'|'replace']
            namespace ('get'|'set'|'print') (namespace_name) ['all'|'alias'|'lists'|'timers'] [source_name] [destination_name]
            namespace 'print' [namespace_name] ['all'|'alias'|'lists'|'timers'] [name]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ManageNamespaces_Print(RazorEnhanced.UOS.ASTNode,System.String,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            namespace 'print' [namespace_name] ['all'|'alias'|'lists'|'timers'] [name]
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TargetType(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            targettype (graphic) [color] [range]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TargetGround(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            targetground (graphic) [color] [range]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TargetTile(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
             targettile ('last'/'current'/(x y z)) [graphic]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TargetTileOffset(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            targettileoffset (x y z) [graphic]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.TargetTileRelative(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            targettilerelative (serial) (range) [reverse = 'true' or 'false'] [graphic]
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.WarMode(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            war (on/off)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ClearTargetQueue(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
             <summary>
            cleartargetqueue
             </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.SetTimer(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
             settimer ('timer name') (milliseconds)
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.RemoveTimer(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
             removetimer ('timer name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.CreateTimer(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
             createtimer ('timer name')
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.UOSteamEngine.ShowNames(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            shownames NOT IMPLEMENTED 
            </summary>
        </member>
        <member name="M:RazorEnhanced.UOS.Interpreter.ExpressionCommand(RazorEnhanced.UOS.ASTNode,RazorEnhanced.UOS.Argument[],System.Boolean,System.Boolean)">
            <summary>
            An adapter that lets expressions be registered as commands
            </summary>
            <param name="node">name of command</param>
            <param name="args">arguments passed to command</param>
            <param name="quiet">ignored</param>
            <param name="force">ignored</param>
            <returns></returns>
        </member>
        <member name="T:RazorEnhanced.Vendor">
            <summary>
            @experimental
            The Vendor class allow you to read the list items purchased last.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Vendor.LastSellList">
            <summary>@nodoc</summary>
        </member>
        <member name="P:RazorEnhanced.Vendor.LastVendor">
            <summary>@nodoc</summary>
        </member>
        <member name="M:RazorEnhanced.Vendor.StoreSellList(Assistant.PacketReader,Assistant.PacketHandlerEventArgs)">
            <summary>@nodoc</summary>
        </member>
        <member name="M:RazorEnhanced.Vendor.StoreBuyList(Assistant.PacketReader,Assistant.PacketHandlerEventArgs)">
            <summary>@nodoc</summary>
        </member>
        <member name="M:RazorEnhanced.Vendor.Buy(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Attempts to buy the item from the vendor specified.
            <param name="vendorSerial">The Vendor to buy from</param>
            <param name="itemName">the name of the item to buy (can be partial)</param>
            <param name="amount">amount to attempt to buy</param>
            <param name="maxPrice">Don't buy them if the cost exceeds this price.
            default value = -1 means don't check price</param>
            Returns True if a purchase is made, False otherwise
            </summary>
        </member>
        <member name="M:RazorEnhanced.Vendor.Buy(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Attempts to buy the item from the vendor specified.
            <param name="vendorSerial">The Vendor to buy from</param>
            <param name="itemID">the itemID of the type of item to buy</param>
            <param name="amount">amount to attempt to buy</param>
            <param name="maxPrice">Don't buy them if the cost exceeds this price.
            default value = -1 means don't check price</param>
            Returns True if a purchase is made, False otherwise
            </summary>
        </member>
        <member name="T:RazorEnhanced.Vendor.BuyItem">
            <summary>
            The BuyItem class store informations about a recently purchased item.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Vendor.BuyList(System.Int32)">
            <summary>
            Get the list of items purchased in the last trade, with a specific Vendor.
            </summary>
            <param name="vendorSerial">Serial of the Vendor (default: -1 - most recent trade)</param>
            <returns>A list of BuyItem</returns>
        </member>
        <member name="T:RazorEnhanced.SellAgent">
            <summary>
            The SellAgent class allow you to interect with the SellAgent, via scripting.
            </summary>
        </member>
        <member name="T:RazorEnhanced.BuyAgent">
            <summary>
            The BuyAgent class allow you to interect with the BuyAgent, via scripting.
            </summary>
        </member>
        <member name="M:RazorEnhanced.BuyAgent.Enable">
            <summary>
            Enable BuyAgent on the currently active list.
            </summary>
        </member>
        <member name="M:RazorEnhanced.BuyAgent.Disable">
            <summary>
            Disable BuyAgent Agent.
            </summary>
        </member>
        <member name="M:RazorEnhanced.BuyAgent.Status">
            <summary>
            Check BuyAgent Agent status
            </summary>
            <returns>True: if the BuyAgent is active - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.BuyAgent.ChangeList(System.String)">
            <summary>
            Change the BuyAgent's active list.
            </summary>
            <param name="listName">Name of an existing buy list.</param>
        </member>
        <member name="T:RazorEnhanced.Organizer">
            <summary>
            The Organizer class allow you to interect with the Scavenger Agent, via scripting.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Organizer.FStart">
            <summary>
            Start the Organizer Agent on the currently active list.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Organizer.FStop">
            <summary>
            Stop the Organizer Agent.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Organizer.Status">
            <summary>
            Check Organizer Agent status
            </summary>
            <returns>True: if the Organizer is running - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Organizer.ChangeList(System.String)">
            <summary>
            Change the Organizer's active list.
            </summary>
            <param name="listName">Name of an existing organizer list.</param>
        </member>
        <member name="T:RazorEnhanced.Scavenger">
            <summary>
            The Scavenger class allow you to interect with the Scavenger Agent, via scripting.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Scavenger.RunOnce(System.Collections.Generic.List{RazorEnhanced.Scavenger.ScavengerItem},System.Int32,RazorEnhanced.Items.Filter)">
            <summary>   
            @nodoc
            Run the Scavenger Agent once on the currently active list, for a given amount of time, using a filter. 
            </summary>
            <param name="scavengerList"></param>
            <param name="millisec"></param>
            <param name="filter"></param>
        </member>
        <member name="F:RazorEnhanced.Scavenger.lootChangeMsgSent">
            <summary>
            @nodoc
            </summary>
        </member>
        <member name="M:RazorEnhanced.Scavenger.GetScavengerBag">
            <summary>
            Get current Scravenger destination container.
            </summary>
            <returns>Serial of the container.</returns>
        </member>
        <member name="M:RazorEnhanced.Scavenger.Start">
            <summary>
            Start the Scavenger Agent on the currently active list.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Scavenger.Stop">
            <summary>
            Stop the Scavenger Agent.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Scavenger.Status">
            <summary>
            Check Scavenger Agent status
            </summary>
            <returns>True: if the Scavenger is running - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Scavenger.ChangeList(System.String)">
            <summary>
            Change the Scavenger's active list.
            </summary>
            <param name="listName">Name of an existing organizer list.</param>
        </member>
        <member name="T:RazorEnhanced.Item">
            <summary>
            The Item class represent a single in-game Item object. Examples of Item are: Swords, bags, bandages, reagents, clothing.
            While the Item.Serial is unique for each Item, Item.ItemID is the unique for the Item apparence, or image. Sometimes is also called ID or Graphics ID.
            Item can also be house foriture as well as decorative items on the ground, like lamp post and banches.
            However, for Item on the ground that cannot be picked up, they might be part of the world map, see Statics class.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.ItemID">
            <summary>
            Represents the type of Item, usually unique for the Item image.  Sometime called ID or Graphics ID.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Updated">
            <summary>
            Check if the Item already have been updated with all the properties. (need better documentation) 
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.ContainerOpened">
            <summary>
            True when the container was opened
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Amount">
            <summary>
            Read amount from item type object.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Direction">
            <summary>
            Item direction. 
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Visible">
            <summary>
            Item is Visible
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Movable">
            <summary>
            Item is movable
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Layer">
            <summary>
            Gets the Layer, for werable items only. (need better documentation) 
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Light">
            <summary>
            Item light's direction (e.g. will affect corpse's facing direction)
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Container">
            <summary>
            Serial of the container which contains the object.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.RootContainer">
            <summary>
            Get serial of root container of item.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.PropsUpdated">
            <summary>
            True: if Properties are updated - False: otherwise.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Item.IsChildOf(RazorEnhanced.Item,System.Int32)">
            <summary>
            Check if an Item is contained in a container. Can be a Item or a Mobile (wear by).
            </summary>
            <param name="container">Item as container.</param>
            <returns>True: if is contained - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Item.IsChildOf(RazorEnhanced.Mobile,System.Int32)">
            <param name="container">Mobile as container.</param>
        </member>
        <member name="M:RazorEnhanced.Item.DistanceTo(RazorEnhanced.Mobile)">
            <summary>
            Return the distance in number of tiles, from Item to Mobile.
            </summary>
            <param name="mob">Target as Mobile</param>
            <returns>Distance in number of tiles.</returns>
        </member>
        <member name="M:RazorEnhanced.Item.DistanceTo(RazorEnhanced.Item)">
            <param name="itm">Target as Item</param>
        </member>
        <member name="P:RazorEnhanced.Item.Contains">
            <summary>
            Contains the list of Item inside a container.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.GridNum">
            <summary>
            Returns the GridNum of the item. (need better documentation) 
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.OnGround">
            <summary>
            True: if the item is on the ground - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsContainer">
            <summary>
            True: if the item is a container - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsBagOfSending">
            <summary>
            True: if the item is a bag of sending - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsInBackpack">
            <summary>
            True: if the item is in the Player's backpack - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsLootableTarget">
            <summary>
            True: if the item is lootable - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsInBank">
            <summary>
            True: if the item is in the Player's bank - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsSearchable">
            <summary>
            True: if the item is a pouch - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsCorpse">
            <summary>
            True: if the item is a corpse - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.CorpseNumberItems">
            <summary>
            -1 until corpse is checked, then # items in corpse. Used by looter to ignore empty corpses
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsDoor">
            <summary>
            True: if the item is a door - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsLootable">
            <summary>
            True: For regualar items - False: for hair, beards, etc.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsResource">
            <summary>
            True: if the item is a resource (ore, sand, wood, stone, fish) - False: otherwise
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsPotion">
            <summary>
            True: if the item is a potion - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsVirtueShield">
            <summary>
            True: if the item is a virtue shield - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.IsTwoHanded">
            <summary>
            True: if the item is a 2-handed weapon - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Price">
            <summary>
            @nodoc
            @experimental
            Price of a recently purchased item. (see Vendor class )
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.BuyDesc">
            <summary>
            @nodoc
            @experimental
            Descrition of a recently purchased item. (see Vendor class )
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Properties">
            <summary>
            Get the list of Properties of an Item.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Weight">
            <summary>
            Get the weight of a item. (0: no weight)
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Durability">
            <summary>
            Get the current durability of an Item. (0: no durability)
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.MaxDurability">
            <summary>
            Get the maximum durability of an Item. (0: no durability)
            </summary>
        </member>
        <member name="P:RazorEnhanced.Item.Image">
            <summary>
            Get the in-game image on an Item as Bitmap object.
            See MSDN: https://docs.microsoft.com/dotnet/api/system.drawing.bitmap
            </summary>
        </member>
        <member name="T:RazorEnhanced.Items">
            <summary>
            The Items class provides a wide range of functions to search and interact with Items.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Items.OpenContainerAt(RazorEnhanced.Item,System.Int32,System.Int32)">
            <summary>
            Open a container at a specific location on the screen
            </summary>
            <param name="bag">Container as Item object.</param>
            <param name="x">x location to open at</param>
            <param name="y">y location to open at</param>
        </member>
        <member name="M:RazorEnhanced.Items.IgnoreTypes(IronPython.Runtime.PythonList)">
            <summary>
            Used to ignore specific types. Be careful as you wont see things you ignore, 
            and could result in a mobile being able to kill you without you seeing it
            </summary>
        </member>
        <member name="M:RazorEnhanced.Items.GetWeaponAbility(System.Int32)">
            <summary>
            NOTE: This is from an internal razor table and can be changed based on your server!
            
            Returns a pair of string values (Primary Ability, Secondary Ability) 
            for the supplied item ID. 
            "Invalid", "Invalid" for items not in the internal table
            </summary>
        </member>
        <member name="M:RazorEnhanced.Items.WaitForContents(RazorEnhanced.Item,System.Int32)">
            <summary>
            Open a container an wait for the Items to load, for a maximum amount of time.
            </summary>
            <param name="bag">Container as Item object.</param>
            <param name="delay">Maximum wait, in milliseconds.</param>
        </member>
        <member name="M:RazorEnhanced.Items.WaitForContents(System.Int32,System.Int32)">
            <param name="bag_serial">Container as Item serial.</param>
            <param name="delay">max time to wait for contents</param>
        </member>
        <member name="M:RazorEnhanced.Items.SetColor(System.Int32,System.Int32)">
             <summary>
             Change/override the Color of an Item, the change affects only Player client. The change is not persistent.
             If the color is -1 or unspecified, the color of the item is restored.
             </summary>
             <param name="serial">Serial of the Item.</param>
             <param name="color">Color as number. (default: -1, reset original color)</param>
            
        </member>
        <member name="M:RazorEnhanced.Items.Color(System.Int32,System.Int32)">
            <summary>
            @nodoc: Method ranamed to SetColor, to be removed.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Items.ChangeDyeingTubColor(RazorEnhanced.Item,RazorEnhanced.Item,System.Int32)">
            <summary>
            Use the Dyes on a Dyeing Tub and select the color via color picker, using dedicated packets. 
            Need to specify the dyes, the dye tube and the color to use.
            </summary>
            <param name="dyes">Dyes as Item object.</param>
            <param name="dyeingTub">Dyeing Tub as Item object.</param>
            <param name="color">Color to choose.</param>
        </member>
        <member name="T:RazorEnhanced.Items.Filter">
            <summary>
            The Items.Filter class is used to store options to filter the global Item list.
            Often used in combination with Items.ApplyFilter.
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.Enabled">
            <summary>
            True: The filter is used - False: Return all Item. ( default: True, active )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.Serials">
            <summary>
            Limit the search to a list of Serials of Item to find. (ex: 0x0406EFCA )
            Supports .Add() and .AddRange()
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.Graphics">
            <summary>
            Limit the search to a list of Grapichs ID (see: Item.ItemID ) 
            Supports .Add() and .AddRange()
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.Name">
            <summary>
            Limit the search by name of the Item.
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.Hues">
            <summary>
            Limit the search to a list of Colors.
            Supports .Add() and .AddRange()
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.RangeMin">
            <summary>
            Limit the search by distance, to Items which are at least RangeMin tiles away from the Player. ( default: -1, any Item )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.RangeMax">
            <summary>
            Limit the search by distance, to Items which are at most RangeMax tiles away from the Player. ( default: -1, any Item )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.ZRangeMin">
            <summary>
            Limit the search by height, to Items which are at least ZRangeMin coordinates away from the Player. ( default: -1, any Item )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.ZRangeMax">
            <summary>
            Limit the search by height, to Items which are at most ZRangeMax coordinates away from the Player. ( default: -1, any Item )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.Movable">
            <summary>
            Limit the search to only Movable Items. ( default: -1, any Item )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.Multi">
            <summary>
            Limit the search to only Multi Items. ( default: -1, any Item )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.CheckIgnoreObject">
            <summary>
            Exclude from the search Items which are currently on the global Ignore List. ( default: False, any Item )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.Layers">
            <summary>
            Limit the search to the wearable Items by Layer.
            Supports .Add() and .AddRange()
            
            Layers:
                RightHand
                LeftHand
                Shoes
                Pants
                Shirt
                Head
                Gloves
                Ring
                Neck
                Waist
                InnerTorso
                Bracelet
                MiddleTorso
                Earrings
                Arms
                Cloak
                OuterTorso
                OuterLegs
                InnerLegs
                Talisman
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.OnGround">
            <summary>
            Limit the search to the Items on the ground. (default: -1, any Item)
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.IsCorpse">
            <summary>
            Limit the search to the corpses on the ground. (default: -1, any Item)
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.IsContainer">
            <summary>
            Limit the search to the Items which are also containers. (default: -1: any Item)
            </summary>
        </member>
        <member name="F:RazorEnhanced.Items.Filter.IsDoor">
            <summary>
            Limit the search to the doors. (default: -1: any Item)
            </summary>
        </member>
        <member name="M:RazorEnhanced.Items.ApplyFilter(RazorEnhanced.Items.Filter)">
            <summary>
            Filter the global list of Items according to the options specified by the filter ( see: Items.Filter ).
            </summary>
            <param name="filter">A filter object.</param>
            <returns>the list of Items respectinf the filter criteria.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.Select(System.Collections.Generic.List{RazorEnhanced.Item},System.String)">
            <summary>
            Select a single Item from a list by some criteria: Distance, Amount, Durability or Randomly
            </summary>
            <param name="items">List of Item.</param>
            <param name="selector">
                Nearest 
                Farthest 
                Less 
                Most 
                Weakest 
                Strongest
                Random
            </param>
            <returns>The selected item.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.FindBySerial(System.Int32)">
            <summary>
            Search for a specific Item by using it Serial
            </summary>
            <param name="serial">Serial of the Item.</param>
            <returns>Item object if found, or null if not found.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.Lift(RazorEnhanced.Item,System.Int32)">
            <summary>
            Lift an Item and hold it in-hand. ( see: Items.DropFromHand )
            </summary>
            <param name="item">Item object to Lift.</param>
            <param name="amount">Amount to lift. (0: the whole stack)</param>
        </member>
        <member name="M:RazorEnhanced.Items.DropFromHand(RazorEnhanced.Item,RazorEnhanced.Item)">
            <summary>
            Drop into a bag an Item currently held in-hand. ( see: Items.Lift )
            </summary>
            <param name="item">Item object to drop.</param>
            <param name="container">Target container.</param>
        </member>
        <member name="M:RazorEnhanced.Items.Move(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move an Item to a destination, which can be an Item or a Mobile.
            </summary>
            <param name="source">Serial or Item of the Item to move.</param>
            <param name="destination">Serial, Mobile or Item as destination.</param>
            <param name="amount">Amount to move (-1: the whole stack)</param>
            <param name="x">Optional: X coordinate inside the container.</param>
            <param name="y">Optional: Y coordinate inside the container.</param>
        </member>
        <member name="M:RazorEnhanced.Items.MoveOnGround(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move an Item on the ground to a specific location.
            </summary>
            <param name="source">Serial or Item to move.</param>
            <param name="amount">Amount of Items to move (0: the whole stack )</param>
            <param name="x">X world coordinates.</param>
            <param name="y">Y world coordinates.</param>
            <param name="z">Z world coordinates.</param>
        </member>
        <member name="M:RazorEnhanced.Items.DropItemGroundSelf(RazorEnhanced.Item,System.Int32)">
            <summary>
            Drop an Item on the ground, at the current Player position.
            NOTE: On some server is not allowed to drop Items on tiles occupied by Mobiles and the Player.
            </summary>
            <param name="item">Item object to drop.</param>
            <param name="amount">Amount to move. (default: 0, the whole stack)</param>
        </member>
        <member name="M:RazorEnhanced.Items.DropItemGroundSelf(System.Int32,System.Int32)">
            <summary>
            This function seldom works because the servers dont allow drop where your standing
            </summary>
            <param name="serialitem"></param>
            <param name="amount"></param>
        </member>
        <member name="M:RazorEnhanced.Items.UseItem(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Use an Item, optionally is possible to specify a Item or Mobile target.
            NOTE: The optional target may not work on some free shards. Use Target.Execute instead.
            </summary>
            <param name="itemSerial">Serial or Item to use.</param>
            <param name="targetSerial">Optional: Serial of the Item or Mobile target.</param>
            <param name="wait">Optional: Wait for confirmation by the server. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Items.UseItemByID(System.Int32,System.Int32)">
            <summary>
            Use any item of a specific type, matching Item.ItemID. Optionally also of a specific color, matching Item.Hue.
            </summary>
            <param name="itemid">ItemID to be used.</param>
            <param name="color">Color to be used. (default: -1, any)</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Items.FindByID(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Find a single Item matching specific ItemID, Color and Container. 
            Optionally can search in all subcontaners or to a maximum depth in subcontainers.
            Can use -1 on color for no chose color, can use -1 on container for search in all item in memory. The depth defaults to only the top but can search for # of sub containers.
            </summary>
            <param name="itemid">ItemID filter.</param>
            <param name="color">Color filter. (-1: any, 0: natural )</param>
            <param name="container">Serial of the container to search. (-1: any Item)</param>
            <param name="recursive">
            Search subcontainers. 
                True: all subcontainers
                False: only main
                1,2,n: Maximum subcontainer depth
            </param>
            <param name="considerIgnoreList">True: Ignore Items are excluded - False: any Item.</param>
            <returns>The Item matching the criteria.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.FindByID(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Find a single Item matching specific list of ItemID, Color and Container. 
            Optionally can search in all subcontaners or to a maximum depth in subcontainers.
            Can use -1 on color for no chose color, can use -1 on container for search in all item in memory. The depth defaults to only the top but can search for # of sub containers.
            </summary>
            <param name="itemid"> List of ItemID filter.</param>
            <param name="color">Color filter. (-1: any, 0: natural )</param>
            <param name="container">Serial of the container to search. (-1: any Item)</param>
            <param name="range">In containers means the number of sub-containers to search. In World items means distance in squares (10: any Item)</param>
            <param name="recursive">
            Search subcontainers. 
                True: all subcontainers
                False: only main
                1,2,n: Maximum subcontainer depth
            </param>
            <param name="considerIgnoreList">True: Ignore Items are excluded - False: any Item.</param>
            <returns>The Item matching the criteria.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.FindAllByID(IronPython.Runtime.PythonList,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Find a List of Items matching specific list of ItemID, Color and Container. 
            Optionally can search in all subcontaners or to a maximum depth in subcontainers.
            Can use -1 on color for no chose color, can use -1 on container for search in all item in memory.
            The depth defaults to only the top but can search for # of sub containers.
            </summary>
            <param name="itemid"> List of ItemID filter.</param>
            <param name="color">Color filter. (-1: any, 0: natural )</param>
            <param name="container">Serial of the container to search. (-1: any Item)</param>
            <param name="recursive">
            Search subcontainers. 
                True: all subcontainers
                False: only main
                1,2,n: Maximum subcontainer depth
            </param>
            <param name="considerIgnoreList">True: Ignore Items are excluded - False: any Item.</param>
            <returns>The Item matching the criteria.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.FindByName(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Find a single Item matching specific Name, Color and Container. 
            Optionally can search in all subcontaners or to a maximum depth in subcontainers.
            Can use -1 on color for no chose color, can use -1 on container for search in all item in memory. The depth defaults to only the top but can search for # of sub containers.
            </summary>
            <param name="itemName">Item Name filter.</param>
            <param name="color">Color filter. (-1: any, 0: natural )</param>
            <param name="container">Serial of the container to search. (-1: any Item)</param>
            <param name="range">
            Search subcontainers. 
                1,2,n: Maximum subcontainer depth
            </param>
            <param name="considerIgnoreList">True: Ignore Items are excluded - False: any Item.</param>
            <returns>The Item matching the criteria.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.SingleClick(RazorEnhanced.Item)">
            <summary>
            Send a single click network event to the server.
            </summary>
            <param name="item">Serial or Item to click</param>
        </member>
        <member name="M:RazorEnhanced.Items.GetProperties(System.Int32,System.Int32)">
            <summary>
            Request to get immediatly the Properties of an Item, and wait for a specified amount of time.
            This only returns properties and does not attempt to update the object.
            Used in this way, properties for object not yet seen can be retrieved
            </summary>
            <param name="itemserial">Serial or Item read.</param>
            <param name="delay">Maximum waiting time, in milliseconds.</param>
        </member>
        <member name="M:RazorEnhanced.Items.WaitForProps(System.Int32,System.Int32)">
            <summary>
            If not updated, request to the Properties of an Item, and wait for a maximum amount of time. 
            </summary>
            <param name="itemserial">Serial or Item read.</param>
            <param name="delay">Maximum waiting time, in milliseconds.</param>
        </member>
        <member name="M:RazorEnhanced.Items.GetPropStringList(System.Int32)">
            <summary>
            Get string list of all Properties of an item, if item no props list is empty.
            </summary>
            <param name="serial">Serial or Item to read.</param>
            <returns>List of strings.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.GetPropStringByIndex(System.Int32,System.Int32)">
            <summary>
            Get a Property line, by index. if not found returns and empty string.
            </summary>
            <param name="serial">Serial or Item to read.</param>
            <param name="index">Number of the Property line.</param>
            <returns>A property line as a string.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.GetPropValueString(System.Int32,System.String)">
            <summary>
            Get a Property line, by name. if not found returns and empty string.
            </summary>
            <param name="serial">Serial or Item to read.</param>
            <param name="name">Number of the Property line.</param>
            <returns>A property value as a string.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.GetPropValue(System.Int32,System.String)">
            <summary>
            Read the value of a Property.
            </summary>
            <param name="serial">Serial or Item to read.</param>
            <param name="name">Name of the Propery.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Items.GetTotalResistProp(System.Int32)">
            <summary>
            Get the total resistence of an Item by reading the Propery.
            </summary>
            <param name="serial">Serial or Item to read.</param>
            <returns>The value of the property as float a number.</returns>
        </member>
        <member name="M:RazorEnhanced.Items.Message(RazorEnhanced.Item,System.Int32,System.String)">
            <summary>
            Display an in-game message on top of an Item, visibile only for the Player.
            </summary>
            <param name="item">Serial or Item to display text on.</param>
            <param name="hue">Color of the message.</param>
            <param name="message">Message as </param>
        </member>
        <member name="M:RazorEnhanced.Items.ContainerCount(RazorEnhanced.Item,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Count items inside a container, summing also the amount in stacks.
            </summary>
            <param name="container">Serial or Item to search into.</param>
            <param name="itemid">ItemID of the item to search.</param>
            <param name="color">Color to match. (default: -1, any color)</param>
            <param name="recursive">Search also in already open subcontainers.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Items.Hide(System.Int32)">
            <summary>
            Hied an Item, affects only the player.
            </summary>
            <param name="serial">Serial or Item to hide.</param>
            
        </member>
        <member name="M:RazorEnhanced.Items.Close(System.Int32)">
             <summary>
             Close opened container window. 
             On OSI, to close opened corpse window, you need to close the corpse's root container 
             Currently corpse's root container can be found by using item filter. 
             </summary>
             <param name="serial">Serial or Item to hide.</param>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:RazorEnhanced.Items.OpenAt(System.Int32,System.Int32,System.Int32)" -->
        <member name="M:RazorEnhanced.Items.BackpackCount(System.Int32,System.Int32)">
            <summary>
            Count items in Player Backpack.
            </summary>
            <param name="itemid">ItemID to search.</param>
            <param name="color">Color to search. (default -1: any color)</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Items.ContextExist(System.Int32,System.String)">
            <summary>
            Check if Context Menu entry exists for an Item.
            </summary>
            <param name="serial">Serial or Item to check.</param>
            <param name="name">Name of the Context Manu entry</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Items.GetImage(System.Int32,System.Int32)">
            <summary>
            Get the Image on an Item by specifing the ItemID. Optinally is possible to apply a color.
            </summary>
            <param name="itemID">ItemID to use.</param>
            <param name="hue">Optional: Color to apply. (Default 0, natural)</param>
            <returns></returns>
        </member>
        <member name="T:RazorEnhanced.Misc">
            <summary>
            The Misc class contains general purpose functions of common use.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.ClearDragQueue">
            <summary>
            Clear the Drag-n-Drop queue.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.Inspect">
            <summary>
            Prompt the user with a Target. Open the inspector for the selected target.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.CloseBackpack">
            <summary>
            Close the backpack. 
            (OSI client only, no ClassicUO)
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.AppendToFile(System.String,System.String)">
            <summary>
            Allows creation and append of a file within RE ValidLocations.
            For OSI/RE this is only the RE directory / sub-directories
            For CUO/RE this is only CUO or RE directory / sub-directories
            The filename MUST end in a limited file suffix list
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.AppendNotDupToFile(System.String,System.String)">
            <summary>
            Allows creation and append of a file within RE ValidLocations.
            For OSI/RE this is only the RE directory / sub-directories
            For CUO/RE this is only CUO or RE directory / sub-directories
            The filename MUST end in a limited file suffix list
            Checks to see if an identical line is already in the file, and does not add if it exists
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.RemoveLineInFile(System.String,System.String)">
            <summary>
            Allows removal of a line in a file within RE ValidLocations.
            For OSI/RE this is only the RE directory / sub-directories
            For CUO/RE this is only CUO or RE directory / sub-directories
            The filename MUST end in a limited file suffix list
            Checks to see if an identical line is in the file, and if it exists, it is removed and file written
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.DeleteFile(System.String)">
            <summary>
            Allows deletion of a file within RE ValidLocations.
            For OSI/RE this is only the RE directory / sub-directories
            For CUO/RE this is only CUO or RE directory / sub-directories
            The filename MUST end in a limited file suffix list
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.OpenPaperdoll">
            <summary>
            Open the backpack. 
            (OSI client only, no ClassicUO)
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.NextContPosition(System.Int32,System.Int32)">
            <summary>
            Return the X,Y of the next container, relative to the game window.
            (OSI client only, no ClassicUO)
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.GetContPosition">
            <summary>
            Get the position of the currently active Gump/Container.
            (OSI client only, no ClassicUO)
            </summary>
            <returns>Return X,Y coordinates as a Point2D</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.IsItem(System.UInt32)">
            <summary>
            Determine if the serial is an item
            </summary>
            <param name="serial"> Serial number of object to test is Item</param>
            <returns>Return True - is an Item False - is not an item</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.IsMobile(System.UInt32)">
            <summary>
            Determine if the serial is a mobile
            </summary>
            <param name="serial"> Serial number of object to test is Mobile</param>
            <returns>Return True - is a mobile False - is not a mobile</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.ChangeProfile(System.String)">
            <summary>
            Allow the scripted loading of a profile
            </summary>
            <param name="profileName">Name of profile to load</param>
        </member>
        <member name="M:RazorEnhanced.Misc.Pause(System.Int32)">
            <summary>
            Pause the script for a given amount of time.
            </summary>
            <param name="millisec">Pause duration, in milliseconds.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.Resync">
            <summary>
            Trigger a client ReSync.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.DistanceSqrt(RazorEnhanced.Point3D,RazorEnhanced.Point3D)">
            <summary>
            Compute the distance between 2 Point3D using pythagorian.
            </summary>
            <param name="point_a">First coordinates.</param>
            <param name="point_b">Second coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Misc.Distance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the UO distance between the 2 sets of co-ordinates.
            </summary>
            <param name="X1">X co-ordinate of first place.</param>
            <param name="Y1">Y co-ordinate of first place.</param>
            <param name="X2">X co-ordinate of second place.</param>
            <param name="Y2">Y co-ordinate of second place.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.SendToClient(System.String)">
            <summary>
            Send to the client a list of keystrokes. Can contain control characters: 
            - Send Control+Key: ctrl+u: ^u
            - Send ENTER: {Enter}
            Note: some keys don't work with ClassicUO (es: {Enter} )
            </summary>
            <param name="keys">List of keys.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.SendMessage(System.String,System.Int32,System.Boolean)">
            <summary>
            Send a message to the client.
            </summary>
            <param name="msg">The object to print.</param>
            <param name="color">Color of the message.</param>
            <param name="wait">True: Wait for confimation. - False: Returns instatnly.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.PlaySound(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Send a sound to the client.
            </summary>
            <param name="sound">The sound to play.</param>
            <param name="x">The x point to send sound to.</param>
            <param name="y">The y point to send sound to.</param>
            <param name="z">The z point to send sound to.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.RazorDirectory">
            <summary>
            Get the full path to the main Razor Enhanced folder.
            This path maybe be different from the Python starting folder when RE is loaded as plugin (ex: ClassicUO)
            </summary>
            <returns>Path as text</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.CurrentScriptDirectory">
            <summary>
            @nodoc
            @rename: Misc.ScriptDirectory() 
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptDirectory">
            <summary>
            Get the full path to the Scripts Directory.
            </summary>
            <returns>Full path to the Scripts Directory.</returns>
            
        </member>
        <member name="M:RazorEnhanced.Misc.ConfigDirectory">
            <summary>
            Get the full path to the Config Directory. 
            </summary>
            <returns>Full path to the Scripts Directory.</returns>
            
        </member>
        <member name="M:RazorEnhanced.Misc.DataDirectory">
            <summary>
            Get the full path to the Config Directory. 
            </summary>
            <returns>Full path to the Config Directory.</returns>
            
        </member>
        <member name="M:RazorEnhanced.Misc.Beep">
            <summary>
            Play Beep system sound.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.Disconnect">
            <summary>
            Force client to disconnect.
            </summary>
        </member>
        <member name="T:RazorEnhanced.Misc.Context">
            <summary>
            The Context class holds information about a single entry in the Context Menu.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.UseContextMenu(System.Int32,System.String,System.Int32)">
            <summary>
            Open and click the option of Context menu, given the serial of Mobile or Item, via packets.
            </summary>
            <param name="serial">Serial of the Item or Mobile.</param>
            <param name="choice">Option as Text or integer.</param>
            <param name="delay">Maximum wait for the action to complete.</param>
            <returns>True: Optiona selected succesfully - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.WaitForContext(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Return the List entry of a Context menu, of Mobile or Item objects.
            The function will ask the server for the List and wait for a maximum amount of time.
            </summary>
            <param name="serial">Serial of the entity.</param>
            <param name="delay">Maximum wait.</param>
            <param name="showContext">Show context menu in-game. (default: True)</param>
            <returns>A List of Context objects.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.WaitForContext(RazorEnhanced.Mobile,System.Int32,System.Boolean)">
            <param name="mob">Entity as Item object.</param>
            <param name="delay">max time to wait for context</param>
            <param name="showContext"></param>
        </member>
        <member name="M:RazorEnhanced.Misc.WaitForContext(RazorEnhanced.Item,System.Int32,System.Boolean)">
            <param name="itm">Entity as Item object.</param>
            <param name="delay">max time to wait for context</param>
            <param name="showContext"></param>
        </member>
        <member name="M:RazorEnhanced.Misc.ContextReply(System.Int32,System.Int32)">
            <summary>
            Respond to a context menu on mobile or item. Menu ID is base zero, or can use string of menu text.
            </summary>
            <param name="serial">Serial of the Entity</param>
            <param name="respone_num">Poition of the option in the menu. Starts from 0.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ContextReply(System.Int32,System.String)">
            <param name="serial">serial number of the item to get a context menu from</param>
            <param name="menu_name">Name of the Entry as wirtten in-game.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ResetPrompt">
            <summary>
            Reset a prompt response.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.HasPrompt">
            <summary>
            Check if have a prompt request.
            </summary>
            <returns>True: there is a prompt - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.WaitForPrompt(System.Int32)">
            <summary>
            Wait for a prompt for a maximum amount of time.
            </summary>
            <param name="delay">Maximum wait time.</param>
            <returns>True: Prompt is present - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.CancelPrompt">
            <summary>
            Cancel a prompt request.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.ResponsePrompt(System.String)">
            <summary>
            Response a prompt request. Often used to rename runes and similar.
            </summary>
            <param name="text">Text of the response.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.NoOperation">
            <summary>
            Just do nothing and enjot the present moment.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.MouseLocation">
            <summary>
            Returns a point with the X and Y coordinates of the mouse relative to the UO Window
            </summary>
            <returns>Return X,Y coords as Point object.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.MouseMove(System.Int32,System.Int32)">
            <summary>
            Moves the mouse pointer to the position X,Y relative to the UO window
            </summary>
            <param name="posX">X screen coordinate.</param>
            <param name="posY">Y screen coordinate.</param>
        </member>
        <member name="P:RazorEnhanced.Misc.SharedScriptData">
            <summary>@nodoc</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RazorEnhanced.Misc.AllSharedValue" -->
        <member name="M:RazorEnhanced.Misc.ReadSharedValue(System.String)">
            <summary>
            Get a Shared Value, if value not exist return null.
            Shared values are accessible by every script.
            </summary>
            <param name="name">Name of the value.</param>
            <returns>The stored object.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.SetSharedValue(System.String,System.Object)">
            <summary>
            Set a Shared Value by specific name, if value exist he repalce value.
            Shared values are accessible by every script.
            </summary>
            <param name="name">Name of the value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.RemoveSharedValue(System.String)">
            <summary>
            Remove a Shared Value.
            </summary>
            <param name="name">Name of the value.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.CheckSharedValue(System.String)">
            <summary>
            Check if a shared value exixts.
            </summary>
            <param name="name">Name of the value.</param>
            <returns>True: Shared value exists - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.IgnoreObject(System.Int32)">
            <summary>
            Add an entiry to the ignore list. Can ignore Serial, Items or Mobiles.
            </summary>
            <param name="serial">Serial to ignore.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.IgnoreObject(Assistant.UOEntity)">
            <param name="object">Item to ignore</param>
        </member>
        <member name="M:RazorEnhanced.Misc.CheckIgnoreObject(System.Int32)">
            <summary>
            Check object from ignore list, return true if present. Can check Serial, Items or Mobiles
            </summary>
            <param name="serial">Serial to check.</param>
            <returns>True: Object is ignored - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.CheckIgnoreObject(Assistant.UOEntity)">
            <param name="object">Item to check</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ClearIgnore">
            <summary>
            Clear ignore list from all object
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.UnIgnoreObject(System.Int32)">
            <summary>
            Remove object from ignore list. Can remove serial, items or mobiles
            </summary>
            <param name="serial">Serial to unignore.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.UnIgnoreObject(Assistant.UOEntity)">
            <param name="entity">Item to unignore.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.HasMenu">
            <summary>
            Check if an Old Menu is open.
            </summary>
            <returns>True: is open - False: otherwise</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.CloseMenu">
            <summary>
            Close opened Old Menu.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.MenuContain(System.String)">
            <summary>
            Search in open Old Menu if contains a specific text.
            </summary>
            <param name="text">Text to search.</param>
            <returns>True: Text found - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.GetMenuTitle">
            <summary>
            Get the title of title for open Old Menu.
            </summary>
            <returns>Text of the title.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.WaitForMenu(System.Int32)">
            <summary>
            Pause script until server send an Old Menu, for a maximum amount of time.
            </summary>
            <param name="delay">Maximum wait, in milliseconds.</param>
            <returns>True: if the Old Menu is open - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.MenuResponse(System.String)">
            <summary>
            Perform a menu response by subitem name. If item not exist close menu.
            </summary>
            <param name="text">Name of subitem to respond.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.HasQueryString">
            <summary>
            Check if a have a query string menu opened, return true or false.
            </summary>
            <returns>True: Has quesy - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.WaitForQueryString(System.Int32)">
            <summary>
            Pause script until server send query string request, for a maximum amount of time.
            </summary>
            <param name="delay">Maximum wait, in milliseconds.</param>
            <returns>True: if player has a query - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.QueryStringResponse(System.Boolean,System.String)">
            <summary>
            Perform a query string response by ok or cancel button and specific response string.
            </summary>
            <param name="okcancel">OK Button</param>
            <param name="response">Cancel Button</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptRun(System.String)">
            <summary>
            Run a script by file name, Script must be present in script grid.
            </summary>
            <param name="scriptfile">Name of the script.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptStop(System.String)">
            <summary>
            Stop a script by file name, Script must be present in script grid.
            </summary>
            <param name="scriptfile">Name of the script.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptStopAll(System.Boolean)">
            <summary>
            Stop all script running.
            </summary>
            <param name="skipCurrent">True: Stop all scripts, but the current one - False: stop all scripts. (Dafault: false)</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptCurrent(System.Boolean)">
            <summary>
            Returns the path of the current script.
            </summary>
            <param name="fullpath">True:Returns the full path. False: Returns the filename. (Dafault: true)</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptSuspend(System.String)">
            <summary>
            Suspend a script by file name, Script must be present in script grid.
            </summary>
            <param name="scriptfile">Name of the script.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptResume(System.String)">
            <summary>
            Resume a script by file name, Script must be present in script grid.
            </summary>
            <param name="scriptfile">Name of the script.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptIsSuspended(System.String)">
            <summary>
            Get status of script if is suspended or not, Script must be present in script grid.
            </summary>
            <param name="scriptfile"></param>
            <returns>True: Script is suspended - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.ScriptStatus(System.String)">
            <summary>
            Get status of script if running or not, Script must be present in script grid.
            </summary>
            <param name="scriptfile"></param>
            <returns>True: Script is running - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.CaptureNow">
            <summary>
            Creates a snapshot of the current UO window.
            </summary>
            <returns>The path to the saved file.</returns>
        </member>
        <member name="T:RazorEnhanced.Misc.MapInfo">
            <summary>
            The MapInfo class is used to store information about the Map location.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.GetMapInfo(System.UInt32)">
            <summary>
            Get MapInfo about a Mobile or Item using the serial
            </summary>
            <param name="serial">Serial of the object.</param>
            <returns>A MapInfo object.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.PetRename(System.Int32,System.String)">
            <summary>
            Rename a specific pet.
            </summary>
            <param name="serial">Serial of the pet.</param>
            <param name="name">New name to set.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.PetRename(RazorEnhanced.Mobile,System.String)">
            <param name="mob">Mobile object representing the pet.</param>
            <param name="name">name to assign to the pet</param>
        </member>
        <member name="M:RazorEnhanced.Misc.NoRunStealthToggle(System.Boolean)">
            <summary>
            Set "No Run When Stealth" via scripting. Changes via scripting are not persistents.
            </summary>
            <param name="enable">True: enable the option.</param>
        </member>
        <member name="M:RazorEnhanced.Misc.NoRunStealthStatus">
            <summary>
            Get the status of "No Run When Stealth" via scripting.
            </summary>
            <returns>True: Open is active - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.FocusUOWindow">
            <summary>
            Set UoClient window in focus or restore if minimized.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.ShardName">
            <summary>
            Get the name of the shard.
            </summary>
            <returns>Name of the shard</returns>
        </member>
        <member name="M:RazorEnhanced.Misc.ExportPythonAPI(System.String,System.Boolean)">
            <summary>
            Return a string containing list RE Python API list in JSON format.
            </summary>
            <param name="path">Name of the output file. (default: Config/AutoComplete.json )</param>
            <param name="pretty">Print a readable JSON. (default: True )</param>
        </member>
        <member name="M:RazorEnhanced.Misc.LastHotKey">
            <summary>
            Returns the latest HotKey recorded by razor as HotKeyEvent object.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Misc.FilterSeason(System.Boolean,System.UInt32)">
            <summary>
            Enable or disable the Seasons filter forcing a specific season
            Season filter state will be saved on logout but not the season flag that will be recovered.
            </summary>
            <param name="enable">True: enable seasons filter</param>
            <param name="seasonFlag">
                0: Spring (default fallback)
                1: Summer
                2: Fall
                3: Winter
                4: Desolation
            </param>
        </member>
        <member name="M:RazorEnhanced.Misc.LeftMouseClick(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Perform a phisical left click on the window using Windows API.
            Is possible to use abolute Screen Coordinates by setting clientCoords=False.
            </summary>
            <param name="xpos">X click coordinate.</param>
            <param name="ypos">Y click coordinate.</param>
            <param name="clientCoords">True: Client coordinates.- False:Screen coordinates (default: True, client).</param>
        </member>
        <member name="M:RazorEnhanced.Misc.RightMouseClick(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Perform a phisical Right click on the window.
            </summary>
            <param name="xpos">X click coordinate.</param>
            <param name="ypos">Y click coordinate.</param>
            <param name="clientCoords">True: Client coordinates - False: Screen coordinates (default: True, client).</param>
        </member>
        <member name="M:RazorEnhanced.Misc.GetWindowSize">
            <summary>
            Get a Rectangle representing the window size.
            See also: https://docs.microsoft.com/dotnet/api/system.drawing.rectangle
            </summary>
            <returns>Rectangle object. Properties: X, Y, Width, Height.</returns>
        </member>
        <member name="T:RazorEnhanced.Settings.StringCipher">
            
        </member>
        <member name="T:RazorEnhanced.Spells">
            <summary>
            The Spells class allow you to cast any spell and use abilities, via scripting.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Spells.Cast(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast spell using the spell name. See the skill-specific functions to get the full list of spell names.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually.
            </summary>
            <param name="SpellName">Name of the spell to cast.</param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastMagery(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast a Magery spell using the spell name.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually.
            </summary>
            <param name="SpellName">
               Clumsy
               Create Food
               Feeblemind
               Heal
               Magic Arrow
               Night Sight
               Reactive Armor
               Weaken
               Agility
               Cunning
               Cure
               Harm
               Magic Trap
               Magic Untrap
               Protection
               Strength
               Bless
               Fireball
               Magic Lock
               Poison
               Telekinesis
               Teleport
               Unlock
               Wall of Stone
               Arch Cure
               Arch Protection
               Curse
               Fire Field
               Greater Heal
               Lightning
               Mana Drain
               Recall
               Blade Spirits
               Dispel Field
               Incognito
               Magic Reflection
               Mind Blast
               Paralyze
               Poison Field
               Summon Creature
               Dispel
               Energy Bolt
               Explosion
               Invisibility
               Mark
               Mass Curse
               Paralyze Field
               Reveal
               Chain Lightning
               Energy Field
               Flamestrike
               Gate Travel
               Mana Vampire
               Mass Dispel
               Meteor Swarm
               Polymorph
               Earthquake
               Energy Vortex
               Resurrection
               Summon Air Elemental
               Summon Daemon
               Summon Earth Elemental
               Summon Fire Elemental
               Summon Water Elemental
            </param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastNecro(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast a Necromany spell using the spell name.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually.
            </summary>
            <param name="SpellName">
               Curse Weapon
               Pain Spike
               Corpse Skin
               Evil Omen
               Blood Oath
               Wraith Form
               Mind Rot
               Summon Familiar
               Horrific Beast
               Animate Dead
               Poison Strike
               Wither
               Strangle
               Lich Form
               Exorcism
               Vengeful Spirit
               Vampiric Embrace
            </param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastChivalry(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast a Chivalry spell using the spell name.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually.
            </summary>
            <param name="SpellName">
               Cleanse By Fire
               Close Wounds
               Consecrate Weapon
               Dispel Evil
               Divine Fury
               Enemy Of One
               Holy Light
               Noble Sacrifice
               Remove Curse
               Sacred Journey
            </param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastBushido(System.String,System.Boolean,System.Int32)">
            <summary>
            Cast a Bushido spell using the spell name.
            </summary>
            <param name="SpellName">
               Honorable Execution
               Confidence
               Counter Attack
               Lightning Strike
               Evasion
               Momentum Strike
            </param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
            
        </member>
        <member name="M:RazorEnhanced.Spells.CastNinjitsu(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast a Ninjitsu spell using the spell name.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually.
            </summary>
            <param name="SpellName">
               Animal Form
               Backstab
               Surprise Attack
               Mirror Image
               Shadow jump
               Focus Attack
               Ki Attack
            </param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastSpellweaving(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast a Spellweaving spell using the spell name.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually.
            </summary>
            <param name="SpellName">
               Arcane Circle
               Gift Of Renewal
               Immolating Weapon
               Attune Weapon
               Thunderstorm
               Natures Fury
               Summon Fey
               Summoniend
               Reaper Form
               Wildfire
               Essence Of Wind
               Dryad Allure
               Ethereal Voyage
               Word Of Death
               Gift Of Life
               Arcane Empowerment
            </param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastMysticism(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast a Mysticism spell using the spell name.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually. 
            </summary>
            <param name="SpellName">
               Animated Weapon
               Healing Stone
               Purge
               Enchant
               Sleep
               Eagle Strike
               Stone Form
               SpellTrigger
               Mass Sleep
               Cleansing Winds
               Bombard
               Spell Plague
               Hail Storm
               Nether Cyclone
               Rising Colossus
            </param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastMastery(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast a Mastery spell using the spell name.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually. 
            </summary>
            <param name="SpellName">
               Inspire
               Invigorate
               Resilience
               Perseverance
               Tribulation
               Despair
               Death Ray
               Ethereal Blast
               Nether Blast
               Mystic Weapon
               Command Undead
               Conduit
               Mana Shield
               Summon Reaper
               Enchanted Summoning
               Anticipate Hit
               Warcry
               Intuition
               Rejuvenate
               Holy Fist
               Shadow
               White Tiger Form
               Flaming Shot
               Playing The Odds
               Thrust
               Pierce
               Stagger
               Toughness
               Onslaught
               Focused Eye
               Elemental Fury
               Called Shot
               Saving Throw
               Shield Bash
               Bodyguard
               Heighten Senses
               Tolerance
               Injected Strike
               Potency
               Rampage
               Fists Of Fury
               Knockout
               Whispering
               Combat Training
               Boarding
            </param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastCleric(System.String,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Cast a Cleric spell using the spell name.
            Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
            NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually. 
            </summary>
            <param name="SpellName">
               Bark Skin : Turns the druid's skin to bark, increasing physical, poison and energy resistence while reducing fire resistence.
               Circle Of Thorns : Creates a ring of thorns preventing an enemy from moving.
               Deadly Spores : The enemy is afflicted by poisonous spores.
               Enchanted Grove : Causes a grove of magical trees to grow, hiding the player for a short time.
               Firefly : Summons a tiny firefly to light the Druid's path. The Firefly is a weak creature with little or no combat skills.
               Forest Kin : Summons from a list of woodland spirits that will fight for the druid and assist him in different ways.
               Grasping Roots : Summons roots from the ground to entangle a single target.
               Hibernate : Causes the target to go to sleep.
               Hollow Reed : Increases both the strength and the intelligence of the Druid.
               Hurricane : Calls forth a violent hurricane that damages any enemies within range.
               Lure Stone : Creates a magical stone that calls all nearby animals to it.
               Mana Spring : Creates a magical spring that restores mana to the druid and any party members within range.
               Mushroom Gateway : A magical circle of mushrooms opens, allowing the Druid to step through it to another location.
               Pack Of Beasts : Summons a pack of beasts to fight for the Druid. Spell length increases with skill.
               Restorative Soil : Saturates a patch of land with power, causing healing mud to seep through . The mud can restore the dead to life.
               Shield Of Earth : A quick-growing wall of foliage springs up at the bidding of the Druid.
               Spring Of Life : Creates a magical spring that heals the Druid and their party.
               Swarm Of Insects : Summons a swarm of insects that bite and sting the Druid's enemies.
               Treefellow : Summons a powerful woodland spirit to fight for the Druid.
               Volcanic Eruption : A blast of molten lava bursts from the ground, hitting every enemy nearby.
            </param>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastDruid(System.String,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Cast a Druid spell using the spell name.
             Optionally is possible to specify the Mobile or a Serial as target of the spell. Upon successful casting, the target will be executed automatiaclly by the server.
             NOTE: The "automatic" target is not supported by all shards, but you can restort to the Target class to handle it manually. 
             </summary>
             <param name="SpellName">
                Angelic Faith : Turns you into an angel, boosting your stats. At 100 Spirit Speak you get +20 Str/Dex/Int. Every 5 points of SS = +1 point to each stat, at a max of +24. Will also boost your Anatomy, Mace Fighting and Healing, following the same formula.
                Banish Evil : Banishes Undead targets. Auto kills rotting corpses, lich lords, etc. Works well at Doom Champ. Does not produce a corpse however
                Dampen Spirit : Drains the stamina of your target, according to the description
                Divine Focus : Heal for more, but may be broken.
                Hammer of Faith : Summons a War Hammer with Undead Slayer on it for you
                Purge : Cleanses Poison. Better than Cure
                Restoration : Resurrection. Brings the target back with 100% HP/Mana
                Sacred Boon : A HoT, heal over time spell, that heals 10-15 every few seconds
                Sacrifice : Heals your party members when you take damage. Sort of like thorns, but it heals instead of hurts
                Smite : Causes energy damage
                Touch of Life : Heals even if Mortal Strike or poison are active on the target
                Trial by Fire : Attackers receive damage when they strike you, sort of like a temporary RPD buff
            </param>
             <param name="target">target to use the druid spell on</param>
             <param name="wait"></param>
        </member>
        <member name="M:RazorEnhanced.Spells.Interrupt">
            <summary>
            Interrupt the casting of a spell by performing an equip/unequip.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Spells.CastLastSpell(System.UInt32,System.Boolean)">
            <summary>
            Cast again the last casted spell, on last target.
            </summary>
            <param name="target">Optional: Serial or Mobile to target (default: null)</param>
            <param name="wait">Optional: Wait server to confirm. (default: True)</param>
        </member>
        <member name="M:RazorEnhanced.Spells.CastLastSpellLastTarget">
            <summary>
            Cast again the last casted spell, on last target.
            </summary>
        </member>
        <member name="T:RazorEnhanced.Player">
            <summary>
            The Player class represent the currently logged in character.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Hits">
            <summary>
            Current hit points.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.HitsMax">
            <summary>
            Maximum hit points.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Str">
            <summary>
            Stats value for Strenght.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Mana">
            <summary>
            Current mana.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.ManaMax">
            <summary>
            Maximum mana.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Int">
            <summary>
            Stats value for Intelligence.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Stam">
            <summary>
            Current stamina.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.StamMax">
            <summary>
            Maximum stamina.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Dex">
            <summary>
            Stats value for Dexterity.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.StatCap">
            <summary>
            Get the stats cap.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Fame">
            <summary>
            Fame has to be reverse engineered from the title so it is just ranges:
            0: neutaral - 3 is highest fame
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Karma">
            <summary>
            Karma has to be reverse engineered from the title so it is just ranges:
            -5: most evil, 0: neutaral, 5 most good
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.KarmaTitle">
            <summary>
            This is the title string returned from the server
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.UpdateKarma">
            <summary>
            Costly! 
            Updates the Fame and Karma of the Mobile, but it can take as long as 1 second to complete.
            </summary>
            <returns>True if successful, False if not server packet received</returns>
        </member>
        <member name="P:RazorEnhanced.Player.AR">
            <summary>
            Resistance to Phisical damage.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.FireResistance">
            <summary>
            Resistance to Fire damage.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.ColdResistance">
            <summary>
            Resistance to Cold damage.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.EnergyResistance">
            <summary>
            Resistance to Energy damage.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.PoisonResistance">
            <summary>
            Resistance to Poison damage.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.SwingSpeedIncrease">
            <summary>
            Get total Swing Speed Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.DamageChanceIncrease">
            <summary>
            Get total Damage Chance Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.LowerReagentCost">
            <summary>
            Get total Lower Reagent Cost.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.HitPointsRegeneration">
            <summary>
            Get total Hit Points Regeneration.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.StaminaRegeneration">
            <summary>
            Get total Stamina Regeneration.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.ManaRegeneration">
            <summary>
            Get total Mana Regeneration.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.ReflectPhysicalDamage">
            <summary>
            Get total Reflect Physical Damage.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.EnhancePotions">
            <summary>
            Get total Enhance Potions.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.DefenseChanceIncrease">
            <summary>
            Get total Defense Chance Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.SpellDamageIncrease">
            <summary>
            Get total Spell Damage Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.FasterCastRecovery">
            <summary>
            Get total Faster Cast Recovery.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.FasterCasting">
            <summary>
            Get total Faster Casting.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.LowerManaCost">
            <summary>
            Get total Lower Mana Cost.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.StrengthIncrease">
            <summary>
            Get total Strength Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.DexterityIncrease">
            <summary>
            Get total Dexterity Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.IntelligenceIncrease">
            <summary>
            Get total Intelligence Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.HitPointsIncrease">
            <summary>
            Get total Hit Points Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.StaminaIncrease">
            <summary>
            Get total Stamina Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.ManaIncrease">
            <summary>
            Get total Mana Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.MaximumHitPointsIncrease">
            <summary>
            Get total Maximum Hit Points Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.MaximumStaminaIncrease">
            <summary>
            Get total Maximum Stamina Increase.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Pets">
            <summary>
            Finds all neutral pets in the area that can be renamed.
            This isn't the server information on your pets, but its good enough for most cases
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.TrackingArrow(System.UInt16,System.UInt16,System.Boolean,System.UInt32)">
            <summary>
            Display a fake tracking arrow
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="display">True = On, False = off</param>
            <param name="target">object serial targeted</param>
        </member>
        <member name="P:RazorEnhanced.Player.IsGhost">
            <summary>
            Player is a Ghost
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Poisoned">
            <summary>
            Player is Poisoned
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.YellowHits">
            <summary>
            Player HP bar is not blue, but yellow.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Visible">
            <summary>
            Player is visible, false if hidden.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.WarMode">
            <summary>
            Player has war mode active.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Paralized">
            <summary>
            Player is Paralized. True also while frozen because of casting of spells.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.HasSpecial">
            <summary>
            Player have a special abilities active.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Female">
            <summary>
            Player is a female.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Name">
            <summary>
            Player name.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Notoriety">
            <summary>
            Player notoriety
                1: blue, innocent
                2: green, friend
                3: gray, neutral
                4: gray, criminal
                5: orange, enemy
                6: red, hostile 
                6: yellow, invulnerable
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.Area">
            <summary>
            Get the name of the area in which the Player is currently in. (Ex: Britain, Destard, Vesper, Moongate, etc)
            Regions are defined inside by Config/regions.json.
            </summary>
            <returns>Name of the area. Unknown if not recognized.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.Zone">
            <summary>
            Get the type of zone in which the Player is currently in.
            Regions are defined inside by Config/regions.json.
            </summary>
            <returns>
                Towns
                Dungeons
                Guarded
                Forest
                Unknown
            </returns>
        </member>
        <member name="M:RazorEnhanced.Player.ToggleAlwaysRun">
            <summary>
            Toggle on/off the awlays run flag. 
            NOTE: Works only on OSI client.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Backpack">
            <summary>
            Player backpack, as Item object.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Bank">
            <summary>
            Player bank chest, as Item object.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Quiver">
            <summary>
            Player quiver, as Item object.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Mount">
            <summary>
            Player current Mount, as Item object.
            NOTE: On some server the Serial return by this function doesn't match the mount serial.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.StaticMount">
            <summary>
            Retrieves serial of mount set in Filter/Mount GUI.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.SetStaticMount(System.Int32)">
            <summary>
            Sets serial of mount set in Filter/Mount GUI.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Connected">
            <summary>
            Retrieves Connected State
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Gold">
            <summary>
            Player total gold, in the backpack.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Luck">
            <summary>
            Player total luck.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Body">
            <summary>
            Player Body or MobileID (see: Mobile.Body)
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.MobileID">
            <summary>
            Player MobileID or Body (see: Mobile.MobileID)
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Serial">
            <summary>
            Player unique Serial.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.FollowersMax">
            <summary>
            Player maximum amount of pet/followers.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Followers">
            <summary>
            Player current amount of pet/followers.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.MaxWeight">
            <summary>
            Player maximum weight.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Weight">
            <summary>
            Player current weight.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.InParty">
            <summary>
            Player is in praty.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Position">
            <summary>
            Current Player position as Point3D object. 
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Corpses">
            <summary>
            Each Death Player corpse item is added here
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.ClearCorpseList">
            <summary>
            Clear the Player corpse item list
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Map">
            <summary>
            Player current map, or facet.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.Direction">
            <summary>
            Player current direction, as text.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Player.BuffsInfo">
            <summary>
            Returns a list with every detailed active buff 
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.DistanceTo(Assistant.UOEntity)">
            <summary>
            Returns the distance between the Player and a Mobile or an Item.
            </summary>
            <param name="target">The other Mobile or Item</param>
            <returns>Distance in number of tiles.</returns>
        </member>
        <member name="P:RazorEnhanced.Player.Buffs">
            <summary>
            List of Player active buffs:
               Meditation
               Agility
               Animal Form
               Arcane Enpowerment
               Arcane Enpowerment (new)
               Arch Protection
               Armor Pierce
               Attunement
               Aura of Nausea
               Bleed
               Bless
               Block
               Bload Oath (caster)
               Bload Oath (curse)
               BloodWorm Anemia
               City Trade Deal
               Clumsy
               Confidence
               Corpse Skin
               Counter Attack
               Criminal
               Cunning
               Curse
               Curse Weapon
               Death Strike
               Defense Mastery
               Despair
               Despair (target)
               Disarm (new)
               Disguised
               Dismount Prevention
               Divine Fury
               Dragon Slasher Fear
               Enchant
               Enemy Of One
               Enemy Of One (new)
               Essence Of Wind
               Ethereal Voyage
               Evasion
               Evil Omen
               Faction Loss
               Fan Dancer Fan Fire
               Feeble Mind
               Feint
               Force Arrow
               Berserk
               Fly
               Gaze Despair
               Gift Of Life
               Gift Of Renewal
               Healing
               Heat Of Battle
               Hiding
               Hiryu Physical Malus
               Hit Dual Wield
               Hit Lower Attack
               Hit Lower Defense
               Honorable Execution
               Honored
               Horrific Beast
               Hawl Of Cacophony
               Immolating Weapon
               Incognito
               Inspire
               Invigorate
               Invisibility
               Lich Form
               Lighting Strike
               Magic Fish
               Magic Reflection
               Mana Phase
               Mass Curse
               Medusa Stone
               Mind Rot
               Momentum Strike
               Mortal Strike
               Night Sight
               NoRearm
               Orange Petals
               Pain Spike
               Paralyze
               Perfection
               Perseverance
               Poison
               Poison Resistance
               Polymorph
               Protection
               Psychic Attack
               Consecrate Weapon
               Rage
               Rage Focusing
               Rage Focusing (target)
               Reactive Armor
               Reaper Form
               Resilience
               Rose Of Trinsic
               Rotworm Blood Disease
               Rune Beetle Corruption
               Skill Use Delay
               Sleep
               Spell Focusing
               Spell Focusing (target)
               Spell Plague
               Splintering Effect
               Stone Form
               Strangle
               Strength
               Surge
               Swing Speed
               Talon Strike
               Vampiric Embrace
               Weaken
               Wraith Form
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.BuffsExist(System.String,System.Boolean)">
            <summary>
            Check if a buff is active, by buff name.
            </summary>
            <param name="buffname">
               Meditation
               Agility
               Animal Form
               Arcane Enpowerment
               Arcane Enpowerment (new)
               Arch Protection
               Armor Pierce
               Attunement
               Aura of Nausea
               Bleed
               Bless
               Block
               Bload Oath (caster)
               Bload Oath (curse)
               BloodWorm Anemia
               City Trade Deal
               Clumsy
               Confidence
               Corpse Skin
               Counter Attack
               Criminal
               Cunning
               Curse
               Curse Weapon
               Death Strike
               Defense Mastery
               Despair
               Despair (target)
               Disarm (new)
               Disguised
               Dismount Prevention
               Divine Fury
               Dragon Slasher Fear
               Enchant
               Enemy Of One
               Enemy Of One (new)
               Essence Of Wind
               Ethereal Voyage
               Evasion
               Evil Omen
               Faction Loss
               Fan Dancer Fan Fire
               Feeble Mind
               Feint
               Force Arrow
               Berserk
               Fly
               Gaze Despair
               Gift Of Life
               Gift Of Renewal
               Healing
               Heat Of Battle
               Hiding
               Hiryu Physical Malus
               Hit Dual Wield
               Hit Lower Attack
               Hit Lower Defense
               Honorable Execution
               Honored
               Horrific Beast
               Hawl Of Cacophony
               Immolating Weapon
               Incognito
               Inspire
               Invigorate
               Invisibility
               Lich Form
               Lighting Strike
               Magic Fish
               Magic Reflection
               Mana Phase
               Mass Curse
               Medusa Stone
               Mind Rot
               Momentum Strike
               Mortal Strike
               Night Sight
               NoRearm
               Orange Petals
               Pain Spike
               Paralyze
               Perfection
               Perseverance
               Poison
               Poison Resistance
               Polymorph
               Protection
               Psychic Attack
               Consecrate Weapon
               Rage
               Rage Focusing
               Rage Focusing (target)
               Reactive Armor
               Reaper Form
               Resilience
               Rose Of Trinsic
               Rotworm Blood Disease
               Rune Beetle Corruption
               Skill Use Delay
               Sleep
               Spell Focusing
               Spell Focusing (target)
               Spell Plague
               Splintering Effect
               Stone Form
               Strangle
               Strength
               Surge
               Swing Speed
               Talon Strike
               Vampiric Embrace
               Weaken
               Wraith Form
            </param>
            <returns>True: if the buff is active - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetBuffInfo(System.String,System.Boolean)">
            <summary>
            Check if buff information is active by buff name and returns it.
            </summary>
            <param name="buffName">buff name</param>
            <returns>Buff information</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RazorEnhanced.Player.BuffTime(System.String)" -->
        <member name="M:RazorEnhanced.Player.SpellIsEnabled(System.String)">
            <summary>
            Check if spell is active using the spell name (for spells that have this function).
            </summary>
            <param name="spellname">Name of the spell.</param>
            <returns>True: the spell is enabled - False: otherwise,.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.UnEquipItemByLayer(System.String,System.Boolean)">
            <summary>
            Unequip the Item associated with a specific Layer.
            </summary>
            <param name="layer">
            Layers:
               RightHand
               LeftHand
               Shoes
               Pants
               Shirt
               Head
               Gloves
               Ring
               Neck
               Hair
               Waist
               InnerTorso
               Bracelet
               FacialHair
               MiddleTorso
               Earrings
               Arms
               Cloak
               OuterTorso
               OuterLegs
               InnerLegs
               Talisman
            </param>
            <param name="wait">Wait for confirmation from the server.</param>
        </member>
        <member name="M:RazorEnhanced.Player.EquipItem(System.Int32)">
            <summary>
            Equip an Item
            </summary>
            <param name="serial">Serial or Item to equip.</param>
        </member>
        <member name="M:RazorEnhanced.Player.EquipUO3D(System.Collections.Generic.List{System.Int32})">
            <summary>
            Equip a list of item by using UO3D packet.
            </summary>
            <param name="serials">List of Serials of Item to equip.</param>
        </member>
        <member name="M:RazorEnhanced.Player.EquipUO3D(IronPython.Runtime.PythonList)">
            <summary>
            Equip a python list of item by using UO3D packet.
            </summary>
            <param name="serials"> python list of Serials of Item to equip.</param>
        </member>
        <member name="M:RazorEnhanced.Player.UnEquipUO3D(System.Collections.Generic.List{System.String})">
            <summary>
            UnEquip a list of item by using UO3D packet.
            </summary>
            <param name="layers">List of layer names to unequip.</param>
        </member>
        <member name="M:RazorEnhanced.Player.UnEquipUO3D(IronPython.Runtime.PythonList)">
            <summary>
            UnEquip a python list of layer names by using UO3D packet.
            </summary>
            <param name="layers">python list of layer names to unequip.</param>
        </member>
        <member name="M:RazorEnhanced.Player.CheckLayer(System.String)">
            <summary>
            Check if a Layer is equipped by the Item.
            
            </summary>
            <param name="layer">
            Layers:
               RightHand
               LeftHand
               Shoes
               Pants
               Shirt
               Head
               Gloves
               Ring
               Neck
               Hair
               Waist
               InnerTorso
               Bracelet
               FacialHair
               MiddleTorso
               Earrings
               Arms
               Cloak
               OuterTorso
               OuterLegs
               InnerLegs
               Talisman
            </param>
            <returns>True: the Layer is occupied by an Item - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetItemOnLayer(System.String)">
            <summary>
            Returns the Item associated with a Mobile Layer.
            </summary>
            <param name="layer">
            Layers:
               RightHand
               LeftHand
               Shoes
               Pants
               Shirt
               Head
               Gloves
               Ring
               Neck
               Hair
               Waist
               InnerTorso
               Bracelet
               FacialHair
               MiddleTorso
               Earrings
               Arms
               Cloak
               OuterTorso
               OuterLegs
               InnerLegs
               Talisman
            </param>
            <returns>Item for the layer. Return null if not found or Layer invalid.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetSkillValue(System.String)">
            <summary>
            Get the value of the skill, with modifiers, for the given the skill name.
            </summary>
            <param name="skillname">
               Alchemy
               Anatomy
               Animal Lore
               Item ID
               Arms Lore
               Parry
               Begging
               Blacksmith
               Fletching
               Peacemaking
               Camping
               Carpentry
               Cartography
               Cooking
               Detect Hidden
               Discordance
               EvalInt
               Healing
               Fishing
               Forensics
               Herding
               Hiding
               Provocation
               Inscribe
               Lockpicking
               Magery
               Magic Resist
               Mysticism
               Tactics
               Snooping
               Musicianship
               Poisoning
               Archery
               Spirit Speak
               Stealing
               Tailoring
               Animal Taming
               Taste ID
               Tinkering
               Tracking
               Veterinary
               Swords
               Macing
               Fencing
               Wrestling
               Lumberjacking
               Mining
               Meditation
               Stealth
               Remove Trap
               Necromancy
               Focus
               Chivalry
               Bushido
               Ninjitsu
               Spell Weaving
               Imbuing
            </param>
            <returns>Value of the skill.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetRealSkillValue(System.String)">
            <summary>
            Get the base/real value of the skill for the given the skill name.
            </summary>
            <param name="skillname">
               Alchemy
               Anatomy
               Animal Lore
               Item ID
               Arms Lore
               Parry
               Begging
               Blacksmith
               Fletching
               Peacemaking
               Camping
               Carpentry
               Cartography
               Cooking
               Detect Hidden
               Discordance
               EvalInt
               Healing
               Fishing
               Forensics
               Herding
               Hiding
               Provocation
               Inscribe
               Lockpicking
               Magery
               Magic Resist
               Mysticism
               Tactics
               Snooping
               Musicianship
               Poisoning
               Archery
               Spirit Speak
               Stealing
               Tailoring
               Animal Taming
               Taste ID
               Tinkering
               Tracking
               Veterinary
               Swords
               Macing
               Fencing
               Wrestling
               Lumberjacking
               Mining
               Meditation
               Stealth
               Remove Trap
               Necromancy
               Focus
               Chivalry
               Bushido
               Ninjitsu
               Spell Weaving
               Imbuing
            </param>
            <returns>Value of the skill.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetSkillCap(System.String)">
            <summary>
            Get the skill cap for the given the skill name.
            </summary>
            <param name="skillname">
               Alchemy
               Anatomy
               Animal Lore
               Item ID
               Arms Lore
               Parry
               Begging
               Blacksmith
               Fletching
               Peacemaking
               Camping
               Carpentry
               Cartography
               Cooking
               Detect Hidden
               Discordance
               EvalInt
               Healing
               Fishing
               Forensics
               Herding
               Hiding
               Provocation
               Inscribe
               Lockpicking
               Magery
               Magic Resist
               Mysticism
               Tactics
               Snooping
               Musicianship
               Poisoning
               Archery
               Spirit Speak
               Stealing
               Tailoring
               Animal Taming
               Taste ID
               Tinkering
               Tracking
               Veterinary
               Swords
               Macing
               Fencing
               Wrestling
               Lumberjacking
               Mining
               Meditation
               Stealth
               Remove Trap
               Necromancy
               Focus
               Chivalry
               Bushido
               Ninjitsu
               Spell Weaving
               Imbuing
            </param>
            <returns>Value of the skill cap.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetSkillStatus(System.String)">
            <summary>
            Get lock status for a specific skill. 
            </summary>
            <param name="skillname">
               Alchemy
               Anatomy
               Animal Lore
               Item ID
               Arms Lore
               Parry
               Begging
               Blacksmith
               Fletching
               Peacemaking
               Camping
               Carpentry
               Cartography
               Cooking
               Detect Hidden
               Discordance
               EvalInt
               Healing
               Fishing
               Forensics
               Herding
               Hiding
               Provocation
               Inscribe
               Lockpicking
               Magery
               Magic Resist
               Mysticism
               Tactics
               Snooping
               Musicianship
               Poisoning
               Archery
               Spirit Speak
               Stealing
               Tailoring
               Animal Taming
               Taste ID
               Tinkering
               Tracking
               Veterinary
               Swords
               Macing
               Fencing
               Wrestling
               Lumberjacking
               Mining
               Meditation
               Stealth
               Remove Trap
               Necromancy
               Focus
               Chivalry
               Bushido
               Ninjitsu
               Spell Weaving
               Imbuing
            </param>
            <returns>
            Lock status:
                 0: Up     
                 1: Down 
                 2: Locked 
                -1: Error
            </returns>
        </member>
        <member name="M:RazorEnhanced.Player.SetSkillStatus(System.String,System.Int32)">
            <summary>
            Set lock status for a specific skill. 
            </summary>
            <param name="skillname">
               Alchemy
               Anatomy
               Animal Lore
               Item ID
               Arms Lore
               Parry
               Begging
               Blacksmith
               Fletching
               Peacemaking
               Camping
               Carpentry
               Cartography
               Cooking
               Detect Hidden
               Discordance
               EvalInt
               Healing
               Fishing
               Forensics
               Herding
               Hiding
               Provocation
               Inscribe
               Lockpicking
               Magery
               Magic Resist
               Mysticism
               Tactics
               Snooping
               Musicianship
               Poisoning
               Archery
               Spirit Speak
               Stealing
               Tailoring
               Animal Taming
               Taste ID
               Tinkering
               Tracking
               Veterinary
               Swords
               Macing
               Fencing
               Wrestling
               Lumberjacking
               Mining
               Meditation
               Stealth
               Remove Trap
               Necromancy
               Focus
               Chivalry
               Bushido
               Ninjitsu
               Spell Weaving
               Imbuing
            </param>
            <param name="status">
            Lock status:
                 0: Up     
                 1: Down 
                 2: Locked 
            </param>
        </member>
        <member name="M:RazorEnhanced.Player.GetStatStatus(System.String)">
            <summary> 
            Get lock status for a specific stats. 
            </summary>
            <param name="statname">
                Strength
                Dexterity
                Intelligence
            </param>
            <returns>
            Lock status:
                 0: Up     
                 1: Down 
                 2: Locked 
            </returns>
        </member>
        <member name="M:RazorEnhanced.Player.SetStatStatus(System.String,System.Int32)">
            <summary>
            Set lock status for a specific skill. 
            </summary>
            <param name="statname">
                Strength
                Dexterity
                Intelligence
            </param>
            <param name="status">
            Lock status:
                 0: Up     
                 1: Down 
                 2: Locked 
            </param>
        </member>
        <member name="M:RazorEnhanced.Player.UseSkill(System.String,System.Int32,System.Boolean)">
            <summary>
            Use a specific skill, and optionally apply that skill to the target specified.
            </summary>
            <param name="skillname">
               Alchemy
               Anatomy
               Animal Lore
               Item ID
               Arms Lore
               Parry
               Begging
               Blacksmith
               Fletching
               Peacemaking
               Camping
               Carpentry
               Cartography
               Cooking
               Detect Hidden
               Discordance
               EvalInt
               Healing
               Fishing
               Forensics
               Herding
               Hiding
               Provocation
               Inscribe
               Lockpicking
               Magery
               Magic Resist
               Mysticism
               Tactics
               Snooping
               Musicianship
               Poisoning
               Archery
               Spirit Speak
               Stealing
               Tailoring
               Animal Taming
               Taste ID
               Tinkering
               Tracking
               Veterinary
               Swords
               Macing
               Fencing
               Wrestling
               Lumberjacking
               Mining
               Meditation
               Stealth
               Remove Trap
               Necromancy
               Focus
               Chivalry
               Bushido
               Ninjitsu
               Spell Weaving
               Imbuing
            </param>
            <param name="target">Optional: Serial, Mobile or Item to target. (default: null)</param>
            <param name="wait">Optional: True: wait for confirmation from the server (default: False)</param>
        </member>
        <member name="M:RazorEnhanced.Player.MapSay(System.String)">
            <summary>
            Send message in the Map chat.
            </summary>
            <param name="msg">Message to send</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatSay(System.Int32,System.String)">
            <summary>
            Send message in game.
            </summary>
            <param name="color">Color of the text</param>
            <param name="msg">Message to send.</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatSay(System.String)">
            <summary>
            Send message in game using 1153 for color.
            </summary>
            <param name="msg">Message to send.</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatGuild(System.String)">
            <summary>
            Send message to the guild chat.
            </summary>
            <param name="msg">Message to send.</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatAlliance(System.String)">
            <summary>
            Send message to the alliace chat.
            </summary>
            <param name="msg">Message to send.</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatEmote(System.Int32,System.String)">
            <summary>
            Send an emote in game.
            </summary>
            <param name="color">Color of the text</param>
            <param name="msg">Message to send.</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatWhisper(System.Int32,System.String)">
            <summary>
            Send an wishper message.
            </summary>
            <param name="color">Color of the text</param>
            <param name="msg">Message to send.</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatYell(System.Int32,System.String)">
            <summary>
            Send an yell message.
            </summary>
            <param name="color">Color of the text</param>
            <param name="msg">Message to send.</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatChannel(System.String)">
            <summary>
            Send an chat channel message.
            </summary>
            <param name="msg">Message to send.</param>
        </member>
        <member name="M:RazorEnhanced.Player.ChatParty(System.String,System.Int32)">
            <summary>
            Send message in arty chat. If a recepient_serial is specified, the message is private.
            </summary>
            <param name="msg">Text to send.</param>
            <param name="recepient_serial">Optional: Target of private message.</param>
        </member>
        <member name="M:RazorEnhanced.Player.PartyInvite">
            <summary>
            Invite a person to a party. Prompt for a in-game Target.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.PartyAccept(System.Int32,System.Boolean)">
            <summary>
            Accept an incoming party offer. In case of multiple party oebnding invitation, from_serial is specified, 
            </summary>
            <param name="from_serial">Optional: Serial to accept party from.( in case of multiple offers )</param>
            <param name="force">True: Accept the party invite even you are already in a party.</param>
            <returns>True: if you are now in a party - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.LeaveParty(System.Boolean)">
            <summary>
            Leaves a party.
            </summary>
            <param name="force">True: Leave the party invite even you notin any party.</param>
        </member>
        <member name="M:RazorEnhanced.Player.KickMember(System.Int32)">
            <summary>
            Kick a member from party by serial. Only for party leader
            </summary>
            <param name="serial">Serial of the Mobile to remove.</param>
        </member>
        <member name="M:RazorEnhanced.Player.PartyCanLoot(System.Boolean)">
            <summary>
            Set the Party loot permissions.
            </summary>
            <param name="CanLoot"></param>
        </member>
        <member name="M:RazorEnhanced.Player.SetWarMode(System.Boolean)">
            <summary>
            Set war Mode on on/off. 
            </summary>
            <param name="warflag">True: War - False: Peace</param>
        </member>
        <member name="M:RazorEnhanced.Player.Attack(System.Int32)">
            <summary>
            Attack a Mobile.
            </summary>
            <param name="serial">Serial or Mobile to attack.</param>
        </member>
        <member name="M:RazorEnhanced.Player.AttackLast">
            <summary>
            Attack last target.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.AttackType(System.Int32,System.Int32,System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Byte})">
            <summary>
            Attack the Entity with a specific Graphic.
            </summary>
            <param name="graphic">Graphic of an Entity.</param>
            <param name="rangemax">Max Range to scan for an Entity.</param>
            <param name="selector">Selector for sorting the Entity.</param>
            <param name="color">Color of an Entity.</param>
            <param name="notoriety">Notorieties of an Entity.</param>
            <returns>if the attack was achieved. (empty: line not found)</returns>
        </member>
        <member name="M:RazorEnhanced.Player.AttackType(System.Collections.Generic.List{System.Int32},System.Int32,System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Byte})">
            <summary>
            Attack the Mobile with a specific Graphic.
            </summary>
            <param name="graphics">Graphics of Entities.</param>
            <param name="rangemax">Max Range to scan for an Entity.</param>
            <param name="selector">Selector for sorting the Entity.</param>
            <param name="color">Graphic of an Entity.</param>
            <param name="notoriety">Notorieties of an Entity.</param>
            <returns>if the attack was achieved. (empty: line not found)</returns>
        </member>
        <member name="M:RazorEnhanced.Player.InvokeVirtue(System.String)">
            <summary>
            Invoke a virtue by name.
            </summary>
            <param name="virtue">
               Honor
               Sacrifice
               Valor
               Compassion
               Honesty
               Humility
               Justice
               Spirituality
            </param>
        </member>
        <member name="M:RazorEnhanced.Player.InvokeVirtue(System.Int32)">
            <summary>
            Invoke a virtue by name.
            </summary>
            <param name="virtue">
               Honor
               Sacrifice
               Valor
               Compassion
               Honesty
               Humility
               Justice
               Spirituality
            </param>
        </member>
        <member name="M:RazorEnhanced.Player.Run(System.String)">
            <summary>
            Run one step in the specified direction and wait for the confirmation of the new position by the server.
            If the character is not facing the direction, the first step only "turn" the Player in the required direction.
            
            
            Info:
            Walking:  5 tiles/sec (~200ms between each step)
            Running: 10 tiles/sec (~100ms between each step)
            </summary>
            <param name="direction">
               North
               South
               East
               West
               Up
               Down
               Left
               Right 
            </param>
            <returns>True: Destination reached - False: Coudn't reach the destination.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.Move(System.String,System.Boolean)">
            <summary>
            Run one step in the specified direction and wait for the confirmation of the new position by the server.
            If the character is not facing the direction, the first step only "turn" the Player in the required direction.
            
            
            Info:
            Walking:  5 tiles/sec (~200ms between each step)
            Running: 10 tiles/sec (~100ms between each step)
            </summary>
            <param name="direction">
               North
               South
               East
               West
               Up
               Down
               Left
               Right 
            </param>
            <param name="run">True: True - use run api, false use walk api</param>
            <returns>True: Destination reached - False: Coudn't reach the destination.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.PathFindTo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Go to the given coordinates using Client-provided pathfinding.
            </summary>
            <param name="x">X map coordinates or Point3D</param>
            <param name="y">Y map coordinates</param>
            <param name="z">Z map coordinates</param>
        </member>
        <member name="M:RazorEnhanced.Player.PathFindTo(RazorEnhanced.Point3D)">
            <summary>
            Go to the position supplied using Client-provided pathfinding.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.PathFindTo(Assistant.Point3D)">
            <summary>
            Go to the position supplied using Client-provided pathfinding.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.Fly(System.Boolean)">
            <summary>
            Enable or disable Gargoyle Flying.
            </summary>
            <param name="status">True: Gargoyle Fly ON - False: Gargoyle fly OFF</param>
        </member>
        <member name="M:RazorEnhanced.Player.HeadMessage(System.Int32,System.String)">
            <summary>
            Display a message above the Player. Visible only by the Player.
            </summary>
            <param name="color">Color of the Text.</param>
            <param name="msg">Text of the message.</param>
        </member>
        <member name="M:RazorEnhanced.Player.OpenPaperDoll">
            <summary>
            Open Player's Paperdoll
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.QuestButton">
            <summary>
            Press the Quest menu button in the paperdoll.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.GuildButton">
            <summary>
            Press the Guild menu button in the paperdoll.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.InRangeMobile(System.Int32,System.Int32)">
            <summary>
            Check if the Mobile is within a certain range (&lt;=).
            </summary>
            <param name="mobile">Serial or Mobile object.</param>
            <param name="range">Maximum distance in tiles.</param>
            <returns>True: Mobile is in range - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.InRange(Assistant.UOEntity,System.Int32)">
            <summary>
            Check if the mobile or item is within a certain range (&lt;=).
            </summary>
            <param name="">Item or Mobile object.</param>
            <param name="range">Maximum distance in tiles.</param>
            <returns>True: Item is in range - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.InRange(System.Int32,System.Int32)">
            <summary>
            Check if the serial is within a certain range (&lt;=).
            </summary>
            <param name="">Item or Mobile serial.</param>
            <param name="range">Maximum distance in tiles.</param>
            <returns>True: serial is in range - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.InRangeMobile(RazorEnhanced.Mobile,System.Int32)">
            <summary>
            Check if the mobile is within a certain range (&lt;=).
            </summary>
            <param name="">Serial or Mobile object.</param>
            <param name="range">Maximum distance in tiles.</param>
            <returns>True: Item is in range - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.InRangeItem(System.Int32,System.Int32)">
            <summary>
            Check if the Item is within a certain range (&lt;=).
            </summary>
            <param name="item">Serial or Item object.</param>
            <param name="range">Maximum distance in tiles.</param>
            <returns>True: Item is in range - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.EquipLastWeapon">
            <summary>
            Equip the last used weapon 
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.WeaponPrimarySA">
            <summary>
            Toggle on/off the primary Special Ability of the weapon. 
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.WeaponSecondarySA">
            <summary>
            Toggle on/off the secondary Special Ability of the weapon. 
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.WeaponClearSA">
            <summary>
            Disable any active Special Ability of the weapon.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.WeaponDisarmSA">
            <summary>
            Toggle Disarm Ability.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.WeaponStunSA">
            <summary>
            Toggle Stun Ability.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Player.SumAttributes(System.Collections.Generic.List{System.String})">
            <summary>
            Scan all the equipped Item, returns the total value of a specific property. (ex: Lower Reagent Cost )
            NOTE: This function is slow.
            </summary>
            <param name="attributename">Name of the property.</param>
            <returns>The total value as number.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.SumAttribute(System.String)">
            <summary>
            Scan all the equipped Item, returns the total value of a specific property. (ex: Lower Reagent Cost )
            NOTE: This function is slow.
            </summary>
            <param name="attributename">Name of the property.</param>
            <returns>The total value as number.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetPropStringList">
            <summary>
            Get the list of Properties of the Player, as list of lines of the tooltip.
            </summary>
            <returns>List of text lines.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetPropStringByIndex(System.Int32)">
            <summary>
            Get a single line of Properties of the Player, from the tooltip, as text. 
            </summary>
            <param name="index">Line number, start from 0.</param>
            <returns>Single line of text.</returns>
        </member>
        <member name="M:RazorEnhanced.Player.GetPropValue(System.String)">
            <summary>
            Get the numeric value of a specific Player property, from the tooltip.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>
                n: value of the propery 
                0: property not found.
                1: property found, but not numeric.
            </returns>
        </member>
        <member name="T:RazorEnhanced.Mobile">
            <summary>
            The Mobile class represents an single alive entity. 
            While the Mobile.Serial is unique for each Mobile, Mobile.MobileID is the unique for the Mobile apparence, or image. Sometimes is also called Body or Body ID.
            Mobiles which dies and leave a corpse behind, they stop existing as Mobiles and instead leave a corpse as a Item object appears.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Name">
            <summary>
            Name of the Mobile.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Fame">
            <summary>
            Fame has to be reverse engineered from the title so it is just ranges:
            0: neutaral - 3 is highest fame
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Karma">
            <summary>
            Karma has to be reverse engineered from the title so it is just ranges:
            -5: most evil, 0: neutaral, 5 most good
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.KarmaTitle">
            <summary>
            This is the title string returned from the server
            </summary>
        </member>
        <member name="M:RazorEnhanced.Mobile.UpdateKarma">
            <summary>
            Costly! 
            Updates the Fame and Karma of the Mobile, but it can take as long as 1 second to complete.
            </summary>
            <returns>True if successful, False if not server packet received</returns>
        </member>
        <member name="P:RazorEnhanced.Mobile.Body">
            <summary>@nodoc @deprecate
            Represents the type of Mobile, usually unique for the Mobile image. ( Alias: Mobile.MobileID )
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.MobileID">
            <summary>
            Represents the type of Mobile, usually unique for the Mobile image. ( Alias: Mobile.Body )
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Color">
            <summary>
            Color of the mobile.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.PropsUpdated">
            <summary>
            True: Mobile.Propertires are updated - False: otherwise.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Visible">
            <summary>
            True: The Mobile is visible - Flase: The mobile is hidden.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Poisoned">
            <summary>
            The mobile is Poisoned.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.YellowHits">
            <summary>
            The mobile healthbar is not blue, but yellow.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Paralized">
            <summary>
            The mobile is Paralized.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Flying">
            <summary>
            The mobile is Flying ( Gragoyle )
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.IsHuman">
             <summary>
             Check is the Mobile has a human body.
             Match any MobileID in the list:
                 183, 184, 185, 186, 400, 
                 401, 402, 403, 605, 606,
                 607, 608, 666, 667, 694, 
                 744, 745, 747, 748, 750,  
                 751, 970, 695
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.IsGhost">
            <summary>
            If is a Ghost
            Match any MobileID  in the list:
                402, 403, 607, 608, 694, 695, 970
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.WarMode">
            <summary>
            Mobile is in War mode.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Female">
            <summary>
            The Mobile is a female.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Notoriety">
            <summary>
            Get the notoriety of the Mobile.
            
            Notorieties:
                1: blue, innocent
                2: green, friend
                3: gray, neutral
                4: gray, criminal
                5: orange, enemy
                6: red, hostile 
                6: yellow, invulnerable
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.CanRename">
            <summary>
            Determine if a mobile can be renamed. (Ex: pets, summons, etc ) 
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.HitsMax">
            <summary>
            Maximum hitpoint of a Mobile. 
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Hits">
            <summary>
            The current hit point of a Mobile. To be read as propotion over Mobile.HitsMax.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.StamMax">
            <summary>
            Maximum stamina of a Mobile.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Stam">
            <summary>
            The current stamina of a Mobile. To be read as propotion over Mobile.StamMax.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.ManaMax">
            <summary>
            Maximum mana of a Mobile.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Mana">
            <summary>
            The current mana of a Mobile. To be read as propotion over Mobile.ManaMax.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Map">
            <summary>
            Current map or facet.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.InParty">
            <summary>
            True: if the Mobile is in your party. - False: otherwise. 
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Mount">
            <summary>
            Returns the Item assigned to the "Mount" Layer.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Direction">
            <summary>
            Returns the direction of the Mobile.
            </summary>
        </member>
        <member name="M:RazorEnhanced.Mobile.DistanceTo(RazorEnhanced.Mobile)">
            <summary>
            Returns the UO distance between the current Mobile and another one.
            </summary>
            <param name="other_mobile">The other mobile.</param>
        </member>
        <member name="M:RazorEnhanced.Mobile.GetItemOnLayer(System.String)">
            <summary>
            Returns the Item associated with a Mobile Layer.
            </summary>
            <param name="layer">
            Layers:
               Layername
               RightHand
               LeftHand
               Shoes
               Pants
               Shirt
               Head
               Gloves
               Ring
               Neck
               Waist
               InnerTorso
               Bracelet
               MiddleTorso
               Earrings
               Arms
               Cloak
               OuterTorso
               OuterLegs
               InnerLegs
            </param>
            <returns>Item for the layer. Return null if not found or Layer invalid.</returns>
        </member>
        <member name="P:RazorEnhanced.Mobile.Backpack">
            <summary>
            Get the Item representing the backpack of a Mobile. Return null if it doesn't have one.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Quiver">
            <summary>
            Get the Item representing the quiver of a Mobile. Return null if it doesn't have one.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Contains">
            <summary>
            Returns the list of items present in the Paperdoll (or equivalent) of the Mobile.
            Might not match the items found using via Layer.
            </summary>
        </member>
        <member name="P:RazorEnhanced.Mobile.Properties">
            <summary>
            Get all properties of a Mobile as list of lines of the tooltip.
            </summary>
        </member>
        <member name="T:RazorEnhanced.Mobiles">
            <summary>
            The Mobiles class provides a wide range of functions to search and interact with Mobile.
            </summary>
        </member>
        <member name="T:RazorEnhanced.Mobiles.Filter">
            <summary>
            The Mobiles.Filter class is used to store options to filter the global Mobile list.
            Often used in combination with Mobiles.ApplyFilter.
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Enabled">
            <summary>
            True: The filter is used - False: Return all Mobile. ( default: True, active )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Serials">
            <summary>
            Limit the search to a list of Serials of Mobile to find. (ex: 0x0406EFCA )
            Supports .Add() and .AddRange()
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Bodies">
            <summary>
            Limit the search to a list of MobileID (see: Mobile.ItemID or Mobile.Body ) 
            Supports .Add() and .AddRange()
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Name">
            <summary>
            Limit the search by name of the Mobile.
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Hues">
            <summary>
            Limit the search to a list of Colors.
            Supports .Add() and .AddRange()
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.RangeMin">
            <summary>
            Limit the search by distance, to Mobiles which are at least RangeMin tiles away from the Player. ( default: -1, any Mobile )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.RangeMax">
            <summary>
            Limit the search by distance, to Mobiles which are at most RangeMax tiles away from the Player. ( default: -1, any Mobile )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.ZLevelMin">
            <summary>
            Limit the search by z-level, to Mobiles which are at least z-level specified. ( default: -4096, all z-levels )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.ZLevelMax">
            <summary>
            Limit the search by z-level, to Mobiles which are at most z-level specified. ( default: 4096, all z-levels )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.CheckLineOfSight">
            <summary>
            Limit the search only to the Mobiles which are in line of sight. (default: false, any Mobile)
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.CheckLineOfSite">
            <summary>@nodoc</summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Poisoned">
            <summary>
            Limit the search to only Poisoned Mobiles.  (default: -1, any Mobile)
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Blessed">
            <summary>
            Limit the search to only Blessed Mobiles.  (default: -1, any Mobile) 
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.IsHuman">
            <summary>
            Limit the search to Humans only. (default: -1, any Mobile )
            Match any MobileID in the list:
                183, 184, 185, 186, 400, 
                401, 402, 403, 605, 606,
                607, 608, 666, 667, 694, 
                744, 745, 747, 748, 750,  
                751, 970, 695
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.IsGhost">
            <summary>
            Limit the search to Ghost only. (default: -1, any Mobile )
            Match any MobileID in the list:
                402, 403, 607, 608, 694, 695, 970
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Female">
            <summary>
            Limit the search to female Mobile.  (default: -1, any)
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Warmode">
            <summary>
            Limit the search to Mobile War mode. (default: -1, any Mobile)
                -1: any
                 0: peace
                 1: war
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Friend">
            <summary>
            Limit the search to friend Mobile. (default: -1, any)
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Paralized">
            <summary>
            Limit the search to paralized Mobile. (default: -1, any)
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.CheckIgnoreObject">
            <summary>
            Exclude from the search Mobiles which are currently on the global Ignore List. ( default: False, any Item )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.IgnorePets">
            <summary>
            Include the Mobiles which are currently on the Pet List. ( default: True, include Pets )
            </summary>
        </member>
        <member name="F:RazorEnhanced.Mobiles.Filter.Notorieties">
            <summary>
            Limit the search to the Mobile by notoriety.
            Supports .Add() and .AddRange()
            
            Notorieties:
                1: blue, innocent
                2: green, friend
                3: gray, neutral
                4: gray, criminal
                5: orange, enemy
                6: red, hostile 
                6: yellow, invulnerable
            </summary>
        </member>
        <member name="T:RazorEnhanced.Mobiles.TrackingInfo">
            <summary>
            The TrackingInfo class hold the latest information about. 
            </summary>
        </member>
        <member name="M:RazorEnhanced.Mobiles.GetTrackingInfo">
            <summary>
            Get the most updated information about tracking.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Mobiles.IsVisible(Assistant.Mobile)">
            <summary>
            Check if a you have line of sight over a Mobile. 
            </summary>
            <param name="mobile">Mobile object to check.</param>
            <returns>True: you have line of sight - False: otherwise.</returns>
        </member>
        <member name="M:RazorEnhanced.Mobiles.FindBySerial(System.Int32)">
            <summary>
            Find the Mobile with a specific Serial.
            </summary>
            <param name="serial">Serial of the Mobile.</param>
            <returns></returns>
        </member>
        <member name="M:RazorEnhanced.Mobiles.FindMobile(System.Int32,System.Collections.Generic.List{System.Byte},System.Int32,System.String,System.Boolean)">
            <summary>
            Find the Mobile with a specific Graphic.
            </summary>
            <param name="graphic">Graphic of a Mobile.</param>
            <param name="notoriety">Notorieties of a Mobile.</param>
            <param name="rangemax">Max Range to scan for a mobile.</param>
            <param name="highlight">highlight the mobile.</param>
            <param name="selector">highlight the mobile.</param>
            <returns>The mobile if in range. (empty: line not found)</returns>
        </member>
        <member name="M:RazorEnhanced.Mobiles.FindMobile(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Byte},System.Int32,System.String,System.Boolean)">
            <summary>
            Find the Mobile with a specific Graphic.
            </summary>
            <param name="graphics">Graphics of a Mobile.</param>
            <param name="notoriety">Notorieties of a Mobile.</param>
            <param name="rangemax">Max Range to scan for a mobile.</param>
            <param name="highlight">highlight the mobile.</param>
            <param name="selector">highlight the mobile.</param>
            <returns>The mobile if in range. (empty: line not found)</returns>
        </member>
        <member name="T:RazorEnhanced.ProtoControlReflection">
            <summary>Holder for reflection information generated from RazorEnhanced/Proto-Control/ProtoControl.proto</summary>
        </member>
        <member name="P:RazorEnhanced.ProtoControlReflection.Descriptor">
            <summary>File descriptor for RazorEnhanced/Proto-Control/ProtoControl.proto</summary>
        </member>
        <member name="F:RazorEnhanced.ProtoLanguage.Unknown">
            <summary>
            Default value
            </summary>
        </member>
        <member name="T:RazorEnhanced.RecordRequest">
            <summary>
            Record Messages
            </summary>
        </member>
        <member name="F:RazorEnhanced.RecordRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:RazorEnhanced.RecordRequest.SessionidFieldNumber">
            <summary>Field number for the "sessionid" field.</summary>
        </member>
        <member name="F:RazorEnhanced.RecordRequest.LanguageFieldNumber">
            <summary>Field number for the "language" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopRecordRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopRecordRequest.SessionidFieldNumber">
            <summary>Field number for the "sessionid" field.</summary>
        </member>
        <member name="F:RazorEnhanced.RecordResponse.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:RazorEnhanced.RecordResponse.SessionidFieldNumber">
            <summary>Field number for the "sessionid" field.</summary>
        </member>
        <member name="F:RazorEnhanced.RecordResponse.MoreFieldNumber">
            <summary>Field number for the "more" field.</summary>
        </member>
        <member name="F:RazorEnhanced.RecordResponse.DataFieldNumber">
            <summary>Field number for the "data" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopRecordResponse.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopRecordResponse.SessionidFieldNumber">
            <summary>Field number for the "sessionid" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopRecordResponse.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="T:RazorEnhanced.PlayRequest">
            <summary>
            Play Messages
            </summary>
        </member>
        <member name="F:RazorEnhanced.PlayRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:RazorEnhanced.PlayRequest.SessionidFieldNumber">
            <summary>Field number for the "sessionid" field.</summary>
        </member>
        <member name="F:RazorEnhanced.PlayRequest.LanguageFieldNumber">
            <summary>Field number for the "language" field.</summary>
        </member>
        <member name="F:RazorEnhanced.PlayRequest.CommandsFieldNumber">
            <summary>Field number for the "commands" field.</summary>
        </member>
        <member name="F:RazorEnhanced.PlayResponse.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:RazorEnhanced.PlayResponse.SessionidFieldNumber">
            <summary>Field number for the "sessionid" field.</summary>
        </member>
        <member name="F:RazorEnhanced.PlayResponse.MoreFieldNumber">
            <summary>Field number for the "more" field.</summary>
        </member>
        <member name="F:RazorEnhanced.PlayResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopPlayRequest.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopPlayRequest.SessionidFieldNumber">
            <summary>Field number for the "sessionid" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopPlayResponse.TypeFieldNumber">
            <summary>Field number for the "type" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopPlayResponse.SessionidFieldNumber">
            <summary>Field number for the "sessionid" field.</summary>
        </member>
        <member name="F:RazorEnhanced.StopPlayResponse.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="T:CircularBuffer.CircularBuffer`1">
            <inheritdoc/>
            <summary>
            Circular buffer.
            
            When writing to a full buffer:
            PushBack -> removes this[0] / Front()
            PushFront -> removes this[Size-1] / Back()
            
            this implementation is inspired by
            http://www.boost.org/doc/libs/1_53_0/libs/circular_buffer/doc/circular_buffer.html
            because I liked their interface.
            </summary>
        </member>
        <member name="F:CircularBuffer.CircularBuffer`1._start">
            <summary>
            The _start. Index of the first element in buffer.
            </summary>
        </member>
        <member name="F:CircularBuffer.CircularBuffer`1._end">
            <summary>
            The _end. Index after the last element in the buffer.
            </summary>
        </member>
        <member name="F:CircularBuffer.CircularBuffer`1._size">
            <summary>
            The _size. Buffer size.
            </summary>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CircularBuffer.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:CircularBuffer.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
            <param name='items'>
            Items to fill buffer with. Items length must be less than capacity.
            Suggestion: use Skip(x).Take(y).ToArray() to build this argument from
            any enumerable.
            </param>
        </member>
        <member name="P:CircularBuffer.CircularBuffer`1.Capacity">
            <summary>
            Maximum capacity of the buffer. Elements pushed into the buffer after
            maximum capacity is reached (IsFull = true), will remove an element.
            </summary>
        </member>
        <member name="P:CircularBuffer.CircularBuffer`1.IsFull">
            <summary>
            Boolean indicating if Circular is at full capacity.
            Adding more elements when the buffer is full will
            cause elements to be removed from the other end
            of the buffer.
            </summary>
        </member>
        <member name="P:CircularBuffer.CircularBuffer`1.IsEmpty">
            <summary>
            True if has no elements.
            </summary>
        </member>
        <member name="P:CircularBuffer.CircularBuffer`1.Size">
            <summary>
            Current buffer size (the number of elements that the buffer has).
            </summary>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.Front">
            <summary>
            Element at the front of the buffer - this[0].
            </summary>
            <returns>The value of the element of type T at the front of the buffer.</returns>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.Back">
            <summary>
            Element at the back of the buffer - this[Size - 1].
            </summary>
            <returns>The value of the element of type T at the back of the buffer.</returns>
        </member>
        <member name="P:CircularBuffer.CircularBuffer`1.Item(System.Int32)">
            <summary>
            Index access to elements in buffer.
            Index does not loop around like when adding elements,
            valid interval is [0;Size[
            </summary>
            <param name="index">Index of element to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when index is outside of [; Size[ interval.</exception>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.PushBack(`0)">
            <summary>
            Pushes a new element to the back of the buffer. Back()/this[Size-1]
            will now return this element.
            
            When the buffer is full, the element at Front()/this[0] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the back of the buffer</param>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.PushFront(`0)">
            <summary>
            Pushes a new element to the front of the buffer. Front()/this[0]
            will now return this element.
            
            When the buffer is full, the element at Back()/this[Size-1] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the front of the buffer</param>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.PopBack">
            <summary>
            Removes the element at the back of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.PopFront">
            <summary>
            Removes the element at the front of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.Clear">
            <summary>
            Clears the contents of the array. Size = 0, Capacity is unchanged.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array, according to the logical
            contents of the buffer (i.e. independent of the internal 
            order/contents)
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.ToArraySegments">
             <summary>
             Get the contents of the buffer as 2 ArraySegments.
             Respects the logical contents of the buffer, where
             each segment and items in each segment are ordered
             according to insertion.
            
             Fast: does not copy the array elements.
             Useful for methods like <c>Send(IList&lt;ArraySegment&lt;Byte&gt;&gt;)</c>.
             
             <remarks>Segments may be empty.</remarks>
             </summary>
             <returns>An IList with 2 segments corresponding to the buffer content.</returns>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this buffer.
            </summary>
            <returns>An enumerator that can be used to iterate this collection.</returns>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.Increment(System.Int32@)">
            <summary>
            Increments the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.Decrement(System.Int32@)">
            <summary>
            Decrements the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:CircularBuffer.CircularBuffer`1.InternalIndex(System.Int32)">
            <summary>
            Converts the index in the argument to an index in <code>_buffer</code>
            </summary>
            <returns>
            The transformed index.
            </returns>
            <param name='index'>
            External index.
            </param>
        </member>
        <member name="T:SyncPrimitives.Semaphore">
            <summary>
            Author: William Stacey (staceyw@mvps.org)
            Date: 06/10/04
            The Dijkstra semaphore (also called a counting
            semaphore) is used to control access to
            a set of resources. A Dijkstra semaphore
            has a count associated with it and each
            Acquire() call reduces the count. A thread
            that tries to Acquire() the semaphore
            with a zero count blocks until someone else
            calls Release() to increase the count.
            <seealso cref="!:http://www.fawcette.com/javapro/
                       2002_02/magazine/features/krangaraju/"/>
            <seealso cref="!:http://www.mcs.drexel.edu/~shartley/
                    MCS361/Lectures/designingJavaSemaphore.html"/>
            </summary>
        </member>
        <member name="M:SyncPrimitives.Semaphore.#ctor(System.Int32)">
            <summary>
            Creates semaphore object with a maxCount
            and set initial count to maxCount.
            </summary>
            <param name="maxCount">
            Maximum count for the semaphore object.
            This value must be greater than zero.
            </param>
        </member>
        <member name="M:SyncPrimitives.Semaphore.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates semaphore object with
            a maximum count and initial count.
            </summary>
            <param name="maxCount">
            Maximum count for the semaphore object.
            This value must be greater than zero.
            </param>
            <param name="initialCount">
            Initial count for the semaphore object.
            This value must be zero or greater
            and less than or equal to maximumCount.
            </param>
        </member>
        <member name="P:SyncPrimitives.Semaphore.Count">
            <summary>
            Gets the current available count (or slots)
            in the semaphore. A count of zero means that no slots
            are available and calls to Acquire will block until
            other thread(s) call Release.
            Example:
            A semaphore with a count of 2 will allow
            2 more Acquire calls before blocking.
            </summary>
        </member>
        <member name="P:SyncPrimitives.Semaphore.MaxCount">
            <summary>
            Gets the maximum count of the semaphore
            set during construction.
            </summary>
        </member>
        <member name="M:SyncPrimitives.Semaphore.Acquire">
            <summary>
            Acquires semaphore and decrements count by 1.
            If count is zero, this will
            block indefinitely until another thread executes
            a Release() to increase the count.
            </summary>
            <returns>true if the call returned because
            the caller reacquired the lock for the
            specified object. This method does not return
            if the lock is not reacquired.</returns>
        </member>
        <member name="M:SyncPrimitives.Semaphore.Acquire(System.Int32)">
            <summary>
            Returns a value indicating if Semephore
            can be acquired within the timeout period.
            </summary>
            <returns>true if the lock was acquired before
            the specified time elapsed; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value of the millisecondsTimeout parameter
            is negative, and is not equal to Infinite.
            </exception>
        </member>
        <member name="M:SyncPrimitives.Semaphore.AcquireAll">
            <summary>
            Acquires all the semaphores and brings
            count to zero. This has the effect
            of block other threads until we release one or more slots.
            <seealso cref="M:SyncPrimitives.Semaphore.Acquire"/>
            <seealso cref="M:SyncPrimitives.Semaphore.ReleaseAll"/>
            </summary>
            <returns>true if the acquired maxCount slots.
            This method does not return until
            all slots are acquired.</returns>
        </member>
        <member name="M:SyncPrimitives.Semaphore.AcquireAll(System.Int32)">
            <summary>
            Tries to acquire (maxCount) slots
            in semaphore. If any single attempt to
            acquire a semaphore slot exceeds
            millisecondsTimeout, then return is false.
            Return is true if we acquire maxCount slots.
            Normally this method would be paired
            with the ReleaseAll method.
            </summary>
            <param name="millisecondsTimeout"></param>
            <returns>true if maxCount slots are acquired
            before the specified time elapsed;
            otherwise, false.</returns>
        </member>
        <member name="M:SyncPrimitives.Semaphore.Release">
            <summary>
            Increases the count of the semaphore object by one.
            </summary>
        </member>
        <member name="M:SyncPrimitives.Semaphore.Release(System.Int32)">
            <summary>
            Increases the count of the semaphore
            object by a specified amount.
            </summary>
            <param name="count">Amount by which the semaphore
            object's current count is to be increased.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The releaseCount must be one or greater.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The releaseCount would cause
            the semaphore's count to exceed maxCount. 
            </exception>
        </member>
        <member name="M:SyncPrimitives.Semaphore.TryRelease">
            <summary>
            Returns indication if we could
            release one slot in the semaphore.
            </summary>
            <returns>true if we released
            one slot; otherwise false.</returns>
        </member>
        <member name="M:SyncPrimitives.Semaphore.TryRelease(System.Int32)">
            <summary>
            Returns indication if we could release
            releaseCount slots in the semaphore.
            </summary>
            <param name="releaseCount"></param>
            <returns>true if we released releaseCount
            slots; otherwise false.</returns>
        </member>
        <member name="M:SyncPrimitives.Semaphore.ReleaseAll">
            <summary>
            Releases all remaining semaphores
            not currently owned. This would normally be
            called by a thread that previously
            called AcquireAll(). Note:  Be carefull when
            using this method as it will release
            all threads waiting on an Aquire method,
            which may or may not be what you want.
            An alternative would be to spin on
            TryRelease() until it returns false.
            </summary>
        </member>
        <member name="M:SyncPrimitives.Semaphore.WaitForStarvation">
            <summary>
            This method blocks the calling thread
            until the semaphore count drops to zero.
            A drop to zero will not be recognized
            if a release happens before this call.
            You can use this to get notified when
            semephore's count reaches zero.  This
            is also known as a "reverse-sensing" semaphore.
            </summary>
        </member>
    </members>
</doc>
